{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red14\green110\blue109;\red255\green255\blue254;\red0\green0\blue0;
\red154\green154\blue154;\red0\green0\blue255;\red191\green28\blue37;\red19\green120\blue72;\red144\green1\blue18;
}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c50196;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c66667\c66667\c66667;\cssrgb\c0\c0\c100000;\cssrgb\c80392\c19216\c19216;\cssrgb\c3529\c53333\c35294;\cssrgb\c63922\c8235\c8235;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl420\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Express\cf4 \strokec4  \cf2 \strokec2 Notes\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 // Basic server syntax\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 const\cf4 \strokec4  express = require(\cf7 \strokec7 \'91\cf4 \strokec4 express\cf7 \strokec7 \'92\cf4 \strokec4 );\cb1 \
\
\cf5 \cb3 \strokec5 // Init express\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 const\cf4 \strokec4  app = express();\cb1 \
\
\cf5 \cb3 \strokec5 // Create your endpoints/route handlers\cf4 \cb1 \strokec4 \
\cb3 app.\cf6 \strokec6 get\cf4 \strokec4 (\cf7 \strokec7 \'91\cf4 \strokec4 /\cf7 \strokec7 \'91\cf4 \strokec4 , (req, res) => \{\cb1 \
\cb3   res.send(\cf7 \strokec7 \'91\cf2 \strokec2 Hello\cf4 \strokec4  \cf2 \strokec2 World\cf4 \strokec4 !\cf7 \strokec7 \'92\cf4 \strokec4 );\cb1 \
\cb3 \});\cb1 \
\
\cf5 \cb3 \strokec5 // Create port\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 const\cf4 \strokec4  \cf2 \strokec2 PORT\cf4 \strokec4  = process.env.\cf2 \strokec2 PORT\cf4 \strokec4  || \cf8 \strokec8 5000\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 // Listen on a port\cf4 \cb1 \strokec4 \
\cb3 app.listen(\cf2 \strokec2 PORT\cf4 \strokec4 , () => console.log(\cf9 \strokec9 `Server started on port \cf4 \strokec4 $\{\cf2 \strokec2 PORT\cf4 \strokec4 \}\cf9 \strokec9 `\cf4 \strokec4 ));\cb1 \
\
\cf5 \cb3 \strokec5 // Middleware\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 Middleware\cf4 \strokec4  functions are functions that have access to the request and response object.  \cf2 \strokec2 Express\cf4 \strokec4  has built \cf6 \strokec6 in\cf4 \strokec4  middleware but middleware also comes \cf6 \strokec6 from\cf4 \strokec4  \cf8 \strokec8 3\cf4 \strokec4 rd party packages/custom made\cb1 \
\
\cf5 \cb3 \strokec5 // Setting up environment\cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 1\cf4 \strokec4 .  \cf2 \strokec2 Open\cf4 \strokec4  up project folder \cf6 \strokec6 in\cf4 \strokec4  code editor\cb1 \
\cf8 \cb3 \strokec8 2\cf4 \strokec4 .  \cf2 \strokec2 Open\cf4 \strokec4  terminal\cb1 \
\cf8 \cb3 \strokec8 3\cf4 \strokec4 .  \cf2 \strokec2 Run\cf4 \strokec4  \cf7 \strokec7 \'93\cf4 \strokec4 npm init\cf7 \strokec7 \'94\cf4 \strokec4  to create a package.json file\cb1 \
\cf8 \cb3 \strokec8 4\cf4 \strokec4 .  \cf2 \strokec2 Run\cf4 \strokec4  \cf7 \strokec7 \'93\cf4 \strokec4 npm install express\cf7 \strokec7 \'94\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 5\cf4 \strokec4 .  \cf2 \strokec2 Create\cf4 \strokec4  main entry point file (index.js or app.js or server.js)\cb1 \
\cf8 \cb3 \strokec8 6\cf4 \strokec4 .  \cf2 \strokec2 Add\cf4 \strokec4  server syntax (\cf6 \strokec6 from\cf4 \strokec4  above) to index.js\cb1 \
\
\cf5 \cb3 \strokec5 // Send a single html file (res.sendFile)\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 const\cf4 \strokec4  express = require(\cf7 \strokec7 \'91\cf2 \strokec2 Express\cf7 \strokec7 \'92\cf4 \strokec4 );\cb1 \
\cf6 \cb3 \strokec6 const\cf4 \strokec4  path = require(\cf7 \strokec7 \'91\cf4 \strokec4 path\cf7 \strokec7 \'92\cf4 \strokec4 );\cb1 \
\
\cf6 \cb3 \strokec6 const\cf4 \strokec4  app = express();\cb1 \
\
\cb3 app.\cf6 \strokec6 get\cf4 \strokec4 (\cf7 \strokec7 \'91\cf4 \strokec4 /\cf7 \strokec7 \'91\cf4 \strokec4 , (req, res) => \{\cb1 \
\cb3   res.sendFile(path.join(__dirname, \cf7 \strokec7 \'91\cf4 \strokec4 public\cf7 \strokec7 \'92\cf4 \strokec4 , \cf7 \strokec7 \'91\cf4 \strokec4 index.html\cf7 \strokec7 \'92\cf4 \strokec4 ));\cb1 \
\cb3 \});\cb1 \
\
\cf5 \cb3 \strokec5 // Set static folder using middleware (app.use)\cf4 \cb1 \strokec4 \
\cb3 app.use(express.static(path.join(__dirname, \cf7 \strokec7 \'91\cf4 \strokec4 public\cf7 \strokec7 \'92\cf4 \strokec4 )));\cb1 \
\
\cf5 \cb3 \strokec5 // JSON route\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 const\cf4 \strokec4  members = \{ \cf7 \strokec7 \'93\cf2 \strokec2 Object\cf4 \strokec4  \cf6 \strokec6 of\cf4 \strokec4  different members\cf7 \strokec7 \'94\cf4 \strokec4  \}\cb1 \
\
\cb3 app.\cf6 \strokec6 get\cf4 \strokec4 (\cf7 \strokec7 \'91\cf4 \strokec4 /api/members\cf7 \strokec7 \'92\cf4 \strokec4 , (req, res) => \{\cb1 \
\cb3   res.json(members);\cb1 \
\cb3 \});\cb1 \
\
\cb3 ** In Postman, under \cf2 \strokec2 GET\cf4 \strokec4  enter \cf7 \strokec7 \'93\cf4 \strokec4 http://localhost:\cf8 \strokec8 5000\cf4 \strokec4 /api/members\cf7 \strokec7 \'94\cf4 \strokec4  to view the \cf2 \strokec2 JSON\cf4 \strokec4  data\cb1 \
\
\cf5 \cb3 \strokec5 // Custom Logger middleware\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 const\cf4 \strokec4  logger = (req, res, next) => \{\cb1 \
\cb3   console.log(\cf9 \strokec9 `\cf4 \strokec4 $\{req.protocol\}\cf9 \strokec9 ://\cf4 \strokec4 $\{req.\cf6 \strokec6 get\cf4 \strokec4 (\cf7 \strokec7 \'91\cf4 \strokec4 host\cf7 \strokec7 \'92\cf4 \strokec4 )\}$\{req.originalUrl\}\cf9 \strokec9 `\cf4 \strokec4 );\cb1 \
\cb3   next();\cb1 \
\cb3 \});\cb1 \
\
\cf7 \cb3 \strokec7 \'97\cf4 \strokec4 > Using the above \cf2 \strokec2 JSON\cf4 \strokec4  route (members), each time you requested the members route \cf6 \strokec6 in\cf4 \strokec4  \cf2 \strokec2 Postman\cf4 \strokec4 , the following would log \cf6 \strokec6 in\cf4 \strokec4  \cf2 \strokec2 Node\cf4 \strokec4 : http://localhost:\cf8 \strokec8 5000\cf4 \strokec4 /api/members\cb1 \
\
\cf5 \cb3 \strokec5 // Adding date and time using Moment\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 1\cf4 \strokec4 .  npm i moment\cb1 \
\cf8 \cb3 \strokec8 2\cf4 \strokec4 .  \cf6 \strokec6 const\cf4 \strokec4  moment = require(\cf7 \strokec7 \'91\cf4 \strokec4 moment\cf7 \strokec7 \'92\cf4 \strokec4 );\cb1 \
\
\cf5 \cb3 \strokec5 // Logger with Moment\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 const\cf4 \strokec4  logger = (req, res, next) => \{\cb1 \
\cb3   console.log(\cf9 \strokec9 `\cf4 \strokec4 $\{req.protocol\}\cf9 \strokec9 ://\cf4 \strokec4 $\{req.\cf6 \strokec6 get\cf4 \strokec4 (\cf7 \strokec7 \'91\cf4 \strokec4 host\cf7 \strokec7 \'92\cf4 \strokec4 )\}$\{req.originalUrl\}\cf9 \strokec9 : \cf4 \strokec4 $\{moment().format()\}\cf9 \strokec9 `\cf4 \strokec4 );\cb1 \
\cb3   next();\cb1 \
\cb3 \});\cb1 \
\
\cf5 \cb3 \strokec5 // Example route to get ALL members\cf4 \cb1 \strokec4 \
\cb3 app.\cf6 \strokec6 get\cf4 \strokec4 (\cf7 \strokec7 \'91\cf4 \strokec4 /api/members\cf7 \strokec7 \'92\cf4 \strokec4 , (req, res) => \{\cb1 \
\cb3   res.json(members);\cb1 \
\cb3 \});\cb1 \
\
\cf5 \cb3 \strokec5 // Example route to get a single member using params\cf4 \cb1 \strokec4 \
\cb3 app.\cf6 \strokec6 get\cf4 \strokec4 (\cf7 \strokec7 \'91\cf4 \strokec4 /api/members/:id\cf7 \strokec7 \'92\cf4 \strokec4 , (req, res) => \{\cb1 \
\cb3   res.json(members.filter(member => member.id === parseInt(req.params.id)));\cb1 \
\cb3 \});\cb1 \
\
\cf5 \cb3 \strokec5 // Example route to get a single member with error checks if that member doesn\'92t exist\cf4 \cb1 \strokec4 \
\cb3 app.\cf6 \strokec6 get\cf4 \strokec4 (\cf7 \strokec7 \'91\cf4 \strokec4 /api/members/:id\cf7 \strokec7 \'92\cf4 \strokec4 , (req, res) => \{\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  found = members.some(member => member.id === parseInt(req.params.id));\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (found) \{\cb1 \
\cb3     res.json(members.filter(member => member.id === parseInt(req.params.id)));\cb1 \
\cb3   \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3     res.status(\cf8 \strokec8 400\cf4 \strokec4 ).json(\{ msg: \cf9 \strokec9 `No member with the id of \cf4 \strokec4 $\{req.params.id\}\cf9 \strokec9 `\cf4 \strokec4  \});\cb1 \
\cb3   \}\cb1 \
\cb3 \});\cb1 \
\
\cf5 \cb3 \strokec5 // Express Router\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 1\cf4 \strokec4 .  \cf2 \strokec2 Create\cf4 \strokec4  \cf7 \strokec7 \'93\cf4 \strokec4 routes\cf7 \strokec7 \'94\cf4 \strokec4  folder \cf6 \strokec6 in\cf4 \strokec4  root\cb1 \
\cf8 \cb3 \strokec8 2\cf4 \strokec4 .  \cf2 \strokec2 Create\cf4 \strokec4  \cf7 \strokec7 \'93\cf4 \strokec4 api\cf7 \strokec7 \'94\cf4 \strokec4  folder \cf6 \strokec6 in\cf4 \strokec4  routes\cb1 \
\cf8 \cb3 \strokec8 3\cf4 \strokec4 .  \cf2 \strokec2 Create\cf4 \strokec4  file \cf6 \strokec6 in\cf4 \strokec4  api (we will use the above examples and create members.js)\cb1 \
\
\cb3 **\cf2 \strokec2 Inside\cf4 \strokec4  \cf6 \strokec6 of\cf4 \strokec4  members.js\cb1 \
\cf6 \cb3 \strokec6 const\cf4 \strokec4  express = require(\cf7 \strokec7 \'91\cf4 \strokec4 express);\cb1 \
\cf6 \cb3 \strokec6 const\cf4 \strokec4  router = express.\cf2 \strokec2 Router\cf4 \strokec4 ();\cb1 \
\cf6 \cb3 \strokec6 const\cf4 \strokec4  members = require(\cf7 \strokec7 \'91\cf4 \strokec4 ../../\cf2 \strokec2 Members\cf4 \strokec4 ); \cf5 \strokec5 // Members is a JSON file with our members\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 // Get ALL members\cf4 \cb1 \strokec4 \
\cb3 router.\cf6 \strokec6 get\cf4 \strokec4 (\cf7 \strokec7 \'91\cf4 \strokec4 /\cf7 \strokec7 \'92\cf4 \strokec4 , (req, res) => \{\cb1 \
\cb3   res.json(members);\cb1 \
\cb3 \});\cb1 \
\
\cf5 \cb3 \strokec5 // Get single member\cf4 \cb1 \strokec4 \
\cb3 router.\cf6 \strokec6 get\cf4 \strokec4 (\cf7 \strokec7 \'91\cf4 \strokec4 /:id\cf7 \strokec7 \'92\cf4 \strokec4 , (req, res) => \{\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  found = members.some(member => member.id === parseInt(req.params.id));\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (found) \{\cb1 \
\cb3     res.json(members.filter(member => member.id === parseInt(req.params.id)));\cb1 \
\cb3   \} \cf6 \strokec6 else\cf4 \strokec4  \{\cb1 \
\cb3     res.status(\cf8 \strokec8 400\cf4 \strokec4 ).json(\{ msg: \cf9 \strokec9 `No member with the id of \cf4 \strokec4 $\{req.params.id\}\cf9 \strokec9 `\cf4 \strokec4  \});\cb1 \
\cb3   \}\cb1 \
\cb3 \});\cb1 \
\
\cb3 module.exports = router;\cb1 \
\
\cf8 \cb3 \strokec8 4\cf4 \strokec4 .  \cf2 \strokec2 Go\cf4 \strokec4  into index.js and add \cf6 \strokec6 this\cf4 \strokec4  under middleware:\cb1 \
\cb3 \'a0\'a0app.use(\cf7 \strokec7 \'91\cf4 \strokec4 /api/members\cf7 \strokec7 \'92\cf4 \strokec4 , require(\cf7 \strokec7 \'91\cf4 \strokec4 ./routes/api/members\cf7 \strokec7 \'92\cf4 \strokec4 ));\cb1 \
\
\cb3  \cf5 \strokec5 // Body parser middleware (you need this for post requests)\cf4 \cb1 \strokec4 \
\cb3 In index.js add the following middleware:\cb1 \
\cb3   app.use(express.json());\cb1 \
\cb3   app.use(express.urlencoded( extended: \cf6 \strokec6 false\cf4 \strokec4  ));\cb1 \
\
\cf5 \cb3 \strokec5 // UUID to create a unique ID\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 1\cf4 \strokec4 .  npm install uuid\cb1 \
\cf8 \cb3 \strokec8 2\cf4 \strokec4 .  \cf6 \strokec6 const\cf4 \strokec4  uuid = require(\cf7 \strokec7 \'91\cf4 \strokec4 uuid\cf7 \strokec7 \'92\cf4 \strokec4 );\cb1 \
\
\cf5 \cb3 \strokec5 // Create Member route\cf4 \cb1 \strokec4 \
\cb3 router.post(\cf7 \strokec7 \'91\cf4 \strokec4 /\cf7 \strokec7 \'91\cf4 \strokec4 , (req, res) => \{\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  newMember = \{\cb1 \
\cb3     id: uuid.v4(),\cb1 \
\cb3     name: req.body.name,\cb1 \
\cb3     email: req.body.email,\cb1 \
\cb3     status: \cf7 \strokec7 \'91\cf4 \strokec4 active\cf7 \strokec7 \'92\cf4 \cb1 \strokec4 \
\cb3   \}\cb1 \
\
\cb3   \cf6 \strokec6 if\cf4 \strokec4  (!newMember.name || !newMember.email) \{\cb1 \
\cb3     res.status(\cf8 \strokec8 400\cf4 \strokec4 ).json(\{ msg: \cf7 \strokec7 \'91\cf2 \strokec2 Please\cf4 \strokec4  include a name and email\cf7 \strokec7 \'92\cf4 \strokec4 \})\cb1 \
\cb3   \}\cb1 \
\
\cb3   members.push(newMember);\cb1 \
\
\cb3   res.json(members);\cb1 \
\cb3 \});\cb1 \
\
}