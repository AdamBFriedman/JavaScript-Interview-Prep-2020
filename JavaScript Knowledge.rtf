{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 HelveticaNeue;\f4\fnil\fcharset0 Menlo-Regular;\f5\fnil\fcharset0 HelveticaNeue-Bold;
\f6\fnil\fcharset0 Georgia;\f7\fnil\fcharset0 TrebuchetMS;\f8\fnil\fcharset0 AppleSymbols;
\f9\fnil\fcharset0 TrebuchetMS-Bold;\f10\fswiss\fcharset0 ArialMT;\f11\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue255;\red251\green2\blue7;
\red66\green1\blue120;\red38\green38\blue38;\red242\green239\blue236;\red0\green0\blue255;\red255\green255\blue254;
\red0\green0\blue0;\red19\green120\blue72;\red255\green255\blue254;\red19\green120\blue72;\red144\green1\blue18;
\red154\green154\blue154;\red0\green0\blue0;\red49\green49\blue50;}
{\*\expandedcolortbl;;\cssrgb\c1680\c19835\c100000;\cssrgb\c100000\c100000\c100000;\cssrgb\c100000\c14913\c0;
\cssrgb\c33333\c10196\c54510;\cssrgb\c20000\c20000\c20000;\cssrgb\c96078\c94902\c94118;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c99608;
\cssrgb\c0\c0\c0;\cssrgb\c3529\c53333\c35294;\cssrgb\c100000\c100000\c99608;\cssrgb\c3529\c53333\c35294;\cssrgb\c63922\c8235\c8235;
\cssrgb\c66667\c66667\c66667;\cssrgb\c0\c0\c0\c84314;\cssrgb\c25098\c25098\c25490;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\margl1440\margr1440\vieww11340\viewh17420\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf2 \cb3 //Popular Array Methods
\f1\b0 \cf0 \
\
from() - creates an array from something let newArray = Array.from(something)\
slice() - Returns a portion of the array as a second array - does not modify. Array.slice(from, until)\
splice() - Modifies the array		Array.splice(idx, howMany)\
filter() filters items out of an array (does NOT create a new array)\
map() create a new array from current array\
find() find and return a single object in an array\
	let match = cities.find(item => \{\
		if (city === item) return true\
	\})\
some() returns a true/false statement based on if at least one element in the array passes the condition\
every() returns a true/false statement based on if all elements pass the condition\
reduce() \
includes() items.include(2) // return boolean\
for in - iterate over the properties of an object (keys) or to iterate over index values of an array/string\
for of - Iterate over the values in maps, sets, arrays or strings\
concat() used to join two arrays:\
	let array1 = ["Cecilie", "Lone"];\
  	let array2 = ["Emil", "Tobias", "Linus"];\
 	let children = array1.concat(array2); \
sort() returns 1 or -1\
\
//sorts in ascending order\
const sortAges = ages.sort((a,b) => a - b) \
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\b \cf4 \expnd0\expndtw0\kerning0
// Map and Set (native)
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"}}{\fldrslt 
\f3\fs32 \cf5 \expnd0\expndtw0\kerning0
Map}}
\f3\fs32 \cf6 \expnd0\expndtw0\kerning0
\'a0is a collection of keyed data items, just like an\'a0
\f4 \cb7 Object
\f3 \cb3 . But the main difference is that\'a0
\f4 \cb7 Map
\f3 \cb3 \'a0allows keys of any type.\
Methods and properties are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa96\partightenfactor0
\ls1\ilvl0
\f4 \cf6 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
new Map()
\f3 \cb3 \'a0\'96 creates the map.\cb1 \
\ls1\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.set(key, value)
\f3 \cb3 \'a0\'96 stores the value by the key.\cb1 \
\ls1\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.get(key)
\f3 \cb3 \'a0\'96 returns the value by the key,\'a0
\f4 \cb7 undefined
\f3 \cb3 \'a0if\'a0
\f4 \cb7 key
\f3 \cb3 \'a0doesn\'92t exist in map.\cb1 \
\ls1\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.has(key)
\f3 \cb3 \'a0\'96 returns\'a0
\f4 \cb7 true
\f3 \cb3 \'a0if the\'a0
\f4 \cb7 key
\f3 \cb3 \'a0exists,\'a0
\f4 \cb7 false
\f3 \cb3 \'a0otherwise.\cb1 \
\ls1\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.delete(key)
\f3 \cb3 \'a0\'96 removes the value by the key.\cb1 \
\ls1\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.clear()
\f3 \cb3 \'a0\'96 removes everything from the map.\cb1 \
\ls1\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.size
\f3 \cb3 \'a0\'96 returns the current element count.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf2 \cb3 \kerning1\expnd0\expndtw0 //Iteration over a Map
\f5\fs48 \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa240\partightenfactor0

\f3\b0\fs32 \cf6 For looping over a\'a0
\f4 \cb7 map
\f3 \cb3 , there are 3 methods:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa96\partightenfactor0
\ls2\ilvl0
\f4 \cf6 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.keys()
\f3 \cb3 \'a0\'96 returns an iterable for keys,\cb1 \
\ls2\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.values()
\f3 \cb3 \'a0\'96 returns an iterable for values,\cb1 \
\ls2\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.entries()
\f3 \cb3 \'a0\'96 returns an iterable for entries\'a0
\f4 \cb7 [key, value]
\f3 \cb3 , it\'92s used by default in\'a0
\f4 \cb7 for..of
\f3 \cb3 .\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\fs36 \cf0 \cb3 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sa240\partightenfactor0

\f3\fs32 \cf6 \expnd0\expndtw0\kerning0
A\'a0
\f4 \cb7 Set
\f3 \cb3 \'a0is a special type collection \'96 \'93set of values\'94 (without keys), where each value may occur only once.\
Its main methods are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa96\partightenfactor0
\ls3\ilvl0
\f4 \cf6 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
new Set(iterable)
\f3 \cb3 \'a0\'96 creates the set, and if an\'a0
\f4 \cb7 iterable
\f3 \cb3 \'a0object is provided (usually an array), copies values from it into the set.\cb1 \
\ls3\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.add(value)
\f3 \cb3 \'a0\'96 adds a value, returns the set itself.\cb1 \
\ls3\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.delete(value)
\f3 \cb3 \'a0\'96 removes the value, returns\'a0
\f4 \cb7 true
\f3 \cb3 \'a0if\'a0
\f4 \cb7 value
\f3 \cb3 \'a0existed at the moment of the call, otherwise\'a0
\f4 \cb7 false
\f3 \cb3 .\cb1 \
\ls3\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.has(value)
\f3 \cb3 \'a0\'96 returns\'a0
\f4 \cb7 true
\f3 \cb3 \'a0if the value exists in the set, otherwise\'a0
\f4 \cb7 false
\f3 \cb3 .\cb1 \
\ls3\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.clear()
\f3 \cb3 \'a0\'96 removes everything from the set.\cb1 \
\ls3\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.size
\f3 \cb3 \'a0\'96 is the elements count.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\fs36 \cf0 \cb3 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sa240\partightenfactor0

\f3\fs32 \cf6 \expnd0\expndtw0\kerning0
The same methods\'a0
\f4 \cb7 Map
\f3 \cb3 \'a0has for iterators are also supported:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa96\partightenfactor0
\ls4\ilvl0
\f4 \cf6 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.keys()
\f3 \cb3 \'a0\'96 returns an iterable object for values,\cb1 \
\ls4\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.values()
\f3 \cb3 \'a0\'96 same as\'a0
\f4 \cb7 set.keys()
\f3 \cb3 , for compatibility with\'a0
\f4 \cb7 Map
\f3 \cb3 ,\cb1 \
\ls4\ilvl0
\f4 \cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.entries()
\f3 \cb3 \'a0\'96 returns an iterable object for entries\'a0
\f4 \cb7 [value, value]
\f3 \cb3 , exists for compatibility with\'a0
\f4 \cb7 Map
\f3 \cb3 .\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\fs36 \cf0 \cb3 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf2 //Cracking the Coding Interview
\f1\b0 \cf0 \
Ch 1-5 and 7-10\
Big O and chapter 1\
Hints for algorithms\
Youtube hackerrank solutions\
\
From Gail:\
1. LISTEN - Typically every detail is needed to solve the problem.  Make sure you have used every detail in your solution to solve the problem optimally\
\
2.  EXAMPLE - Make your examples larger and avoid special cases\
\
3.  BRUTE FORCE - Better to have a brute force than nothing at all.  Don\'92t code it.  State the brute force, state the runtime, optimize.  \
\
4.  OPTIMIZE\
\
5.  WALK THROUGH YOUR ALGORITHM - Know exactly what you\'92re going to do before coding.  What variables & data structures?  How, when, why do they change?  What is the structure of your code?\
\
6.  CODE - Write straight, use space wisely (erase what you don\'92t need, write in top-left corner), coding style matters (braces, consistent naming conventions, consistent spaces, use descriptive variables), modularize before not after\
\
7.  TEST - Analyze (think about each line), double check things that look weird/risky (for loops, math, etc), use small test cases first\
\

\f0\b \cf2 Recursion/Memoization
\f1\b0 \cf0 \
Recursion is a function that calls itself\'85 until it doesn\'92t.  It needs a break point\
Memoization - Optimization technique used by storing/caching the results of expensive functions\
\
Fibonacci: O(2^n) without memoization O(n)\
\pard\pardeftab720\sl420\partightenfactor0

\f4\fs28 \cf8 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 function\cf10 \strokec10  fibonacci(n,memo) \{\cb1 \
\cb9     memo = memo || \{\}\cb1 \
\cb9     \cf8 \strokec8 if\cf10 \strokec10  (n <= \cf11 \strokec11 1\cf10 \strokec10 ) \{\cb1 \
\cb9         \cf8 \strokec8 return\cf10 \strokec10  \cf11 \strokec11 1\cf10 \cb1 \strokec10 \
\cb9     \} \cf8 \strokec8 else\cf10 \strokec10  \{\cb1 \
\cb9       memo[n] = fibonacci(n - \cf11 \strokec11 1\cf10 \strokec10 , memo) + fibonacci(n - \cf11 \strokec11 2\cf10 \strokec10 , memo)\cb1 \
\cb9     \}\cb1 \
\cb9     \cf8 \strokec8 return\cf10 \strokec10  memo[n]\cb1 \
\cb9 \}\cb1 \
\pard\pardeftab720\sl460\partightenfactor0

\fs36 \cf10 \cb3 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 \
\
Anything that can be written recursively *can* be written iteratively\
Fibonacci \'97> fib(n) = fib(n-1) + fib(n-2)\
The 6 Patterns: \
	Each pattern provides a basic framework\
	Once you understand the framework, you can fit all problems into one of these frameworks\
	These patterns overlap extensively - find the pattern that works for you\
	All patterns are based on basic recursive principles\
1. Iteration\
	Iterate over an array/list using recursion\
	Rarely useful except for simplifying code\
	Examples:\
		Print a Linked List in reverse order\
		Factorial\
		Any time when you might use a for loop\
2. Breaking Into Subproblems\
	Classic recursive problems\
	Use this pattern when it makes sense to you\
	Examples:\
		Towers of Hanoi\
		Fibonacci\
3. Selection (Combinations)\
	Fundamentally, problems that can be solved by finding all valid combinations\
	Brute force - find and validate every combination\
	Optimize by validating as we go/backtracking\
	Examples:\
		Knapsack Problem\
		Word Break\
		Phone Spell\
		N Queens\
4. Ordering (Permutations)\
	Similar to selection except order matters\
	Brute force - find all permutations and validate which is best/matches our conditions\
	Examples:\
		Find all permutations of inputs\
		Find all N-digit numbers whose digits sum to a specific value\
		Word squares\
5. Divide and Conquer\
	Can we solve the problem for each half of the input and easily combine the results?\
	Common with searching, sorting, trees\
	Examples:\
		Mergesort\
		Generate all Binary Search Trees for a set of items\
		Find all valid parentheses\
6. Depth First Search\
	Common technique with tree/graph structures\
	Can be used for many different recursive problems\
	Examples:\
		Search in a tree\
		Probability of a knight on a chessboard\
\
\
Space complexity = memory usage (creating arrays for instance)\
\
\pard\pardeftab720\sl420\partightenfactor0

\f4\fs28 \cf8 \cb12 \expnd0\expndtw0\kerning0
function\cf10  countDown(n) \{\cb1 \
\cb12   \cf8 for\cf10  (\cf8 let\cf10  i = n; i > \cf13 0\cf10 ; i--) \{\cb1 \
\cb12     console.log(i)\cb1 \
\cb12   \}\cb1 \
\cb12   console.log(\cf14 \cb12 'Hooray'\cf10 \cb12 )\cb1 \
\cb12 \}\cb1 \
\
\cf8 \cb12 function\cf10  countDownRecursive(n) \{\cb1 \
\cb12   \cf8 if\cf10  (n <= \cf13 0\cf10 ) \{\cb1 \
\cb12     console.log(\cf14 \cb12 'Hooray'\cf10 \cb12 )\cb1 \
\cb12     \cf8 return\cf10 \cb1 \
\cb12   \}\cb1 \
\
\cb12   console.log(n)\cb1 \
\cb12   countDownRecursive(n - \cf13 1\cf10 )\cb1 \
\cb12 \}\cb1 \
\
\cf8 \cb12 function\cf10  sumRange(n) \{\cb1 \
\cb12   \cf8 let\cf10  total = \cf13 0\cf10 ;\cb1 \
\cb12   \cf8 for\cf10  (\cf8 let\cf10  i = n; i > \cf13 0\cf10 ; i--) \{\cb1 \
\cb12     total += i\cb1 \
\cb12   \}\cb1 \
\cb12   \cf8 return\cf10  total\cb1 \
\cb12 \}\cb1 \
\
\cf8 \cb12 function\cf10  sumRangeRecursive(n, total = \cf13 0\cf10 ) \{\cb1 \
\cb12   \cf8 if\cf10  (n <= \cf13 0\cf10 ) \{\cb1 \
\cb12     \cf8 return\cf10  total\cb1 \
\cb12   \}\cb1 \
\cb12   \cf8 return\cf10  sumRangeRecursive(n - \cf13 1\cf10 , total + n)\cb1 \
\cb12 \}\cb1 \
\
\cf8 \cb12 function\cf10  printChildren(t) \{\cb1 \
\cb12   \cf15 // ???\cf10 \cb1 \
\cb12 \}\cb1 \
\
\cf8 \cb12 function\cf10  printChildrenRecursive(tree) \{\cb1 \
\cb12   \cf8 if\cf10  (tree.children.length === \cf13 0\cf10 ) \{\cb1 \
\cb12     \cf8 return\cf10 \cb1 \
\cb12   \} \cb1 \
\cb12   tree.children.forEach(child => \{\cb1 \
\cb12     console.log(child.name)\cb1 \
\cb12     printChildrenRecursive(child)\cb1 \
\cb12   \})\cb1 \
\cb12 \}\cb1 \
\
\cf8 \cb12 const\cf10  tree = \{\cb1 \
\cb12   name: \cf14 \cb12 'John'\cf10 \cb12 ,\cb1 \
\cb12   children: [\cb1 \
\cb12     \{\cb1 \
\cb12       name: \cf14 \cb12 'Jim'\cf10 \cb12 ,\cb1 \
\cb12       children: []\cb1 \
\cb12     \},\cb1 \
\cb12     \{\cb1 \
\cb12       name: \cf14 \cb12 'Zoe'\cf10 \cb12 ,\cb1 \
\cb12       children: [\cb1 \
\cb12         \{ name: \cf14 \cb12 'Kyle'\cf10 \cb12 , children: [] \},\cb1 \
\cb12         \{ name: \cf14 \cb12 'Sophia'\cf10 \cb12 , children: [] \}\cb1 \
\cb12       ]\cb1 \
\cb12     \}\cb1 \
\cb12   ]\cb1 \
\cb12 \}\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\fs36 \cf0 \cb3 \kerning1\expnd0\expndtw0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf2 Reg Ex
\f1\b0 \cf0 \
\
Regular Expression - Sequence of characters (pattern) that define a specific search pattern\
/ - start of regEx and close of regEx\
g - Global (go through entire string)\
i - case insensitive\
? - optional\
/e+/ will match e ee eee eeee\
/ea?/ will match all e\'92s but will also match ea (if there are any)\
/ea*/ will match all e\'92s but will also match ea eaa eaaa eaaaa\
/.ea/ will match sea pea tea eat beat\
\\ - escapes a character\
/\\w/ - match any word character \
/\\W/ - match any non-word character\
/\\s/ - match any white space\
/\\S/ - match any non-white space \
\{\} - min and max\
/\\w\{4\}/ - match any characters 4 digits only\
/\\w\{4,\}/ - match any characters 4 digits and longer\
/\\w\{4,5\}/ - match any characters between 4 digits and 5 digits long\
\
\
\

\f0\b \cf2 Object Destructuring/Spread Operator
\f1\b0 \cf0 \
\
\
Given a string, find the longest non-repeating substring \'93abcabcbb\'94\
\
1. We\'92re not returning \'93abc\'94 but rather 3\
2. function substring(str) \{\
	return int\
\}\
3. Make an assumption: in this case our assumption is we\'92re looking at only lower case letters.  That tells us 26 can be the highest amount it can be\
4. Try brute force first.  \
	What is the longest, what is the most, what is the least \'97> clue that we have a finite set of possibilities (strings and substrings)\
	Find all substrings of our input and then check whether or not they have duplicate characters\
		function hasDup(str) \{\
		\
\}\
\
Dynamic Programming - Problems that have optimal substructure and overlapping subproblems\
You can break a problem down into smaller and smaller chunks and then combine them to get the optimal solutions.  If we can solve the problem recursively, it has optimal substructure\
\
The other component is where dynamic programs really shines.  Memoization - caching values\
\

\f0\b \cf2 Number Methods/Math Object
\f1\b0 \cf0 \
\
toFixed() - \
valueOf() - Calculates the value of the () behind it		(100 + 23).valueOf() = 123\
\
Math.random() - this will get a random number before 0 and 1\
Math.round(9.6) - this will round up to 10\
Math.ceil(4.4) - this will force number to round up to 5\
Math.floor(4.7) - this will force number to round down to 4\
Math.pow(8, 2) - \
Math.sqrt(64) - \
Math.PI;\
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\b \cf4 \expnd0\expndtw0\kerning0
// BIG O
\f6\b0\fs42 \cf16 \
\pard\pardeftab720\sl280\partightenfactor0

\f7\fs24 \cf10 Algorithm complexity is just a way to formally measure how fast a program or algorithm runs\
\
Algorithms - Ideas of how something is computed\
\pard\pardeftab720\sl340\partightenfactor0

\f1\fs30 \cf17 \'a0\'93an algorithm is any well-defined computational procedure that takes some value, or set of values, as input and produces some value, or set of values as output.\'94\
\pard\pardeftab720\sl340\partightenfactor0

\f7\fs24 \cf10 \
\pard\pardeftab720\sl280\partightenfactor0
\cf10 Asymptotic behavior - This filter of "dropping all factors" and of "keeping the largest growing term"\
\
Simple programs can be analyzed by counting the nested loops of the program. A single loop over n items yields f( n ) = n. A loop within a loop yields f( n ) = n
\fs20 \super 2
\fs24 \nosupersub . A loop within a loop within a loop yields f( n ) = n
\fs20 \super 3\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls5\ilvl0
\fs24 \cf10 \kerning1\expnd0\expndtw0 \nosupersub {\listtext	1.	}\expnd0\expndtw0\kerning0
n
\fs20 \super 6
\fs24 \nosupersub \'a0+ 3n 
\f8 \uc0\u8712 
\f7  \uc0\u920 ( n
\fs20 \super 6
\fs24 \nosupersub \'a0)\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
2
\fs20 \super n
\fs24 \nosupersub \'a0+ 12 
\f8 \uc0\u8712 
\f7  \uc0\u920 ( 2
\fs20 \super n
\fs24 \nosupersub \'a0)\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
3
\fs20 \super n
\fs24 \nosupersub \'a0+ 2
\fs20 \super n
\fs24 \nosupersub \'a0
\f8 \uc0\u8712 
\f7  \uc0\u920 ( 3
\fs20 \super n
\fs24 \nosupersub \'a0)\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
n
\fs20 \super n
\fs24 \nosupersub \'a0+ n 
\f8 \uc0\u8712 
\f7  \uc0\u920 ( n
\fs20 \super n
\fs24 \nosupersub \'a0)\
\pard\pardeftab720\sl280\partightenfactor0

\fs20 \cf10 \super \
\pard\pardeftab720\sl280\partightenfactor0

\f9\b\fs24 \cf10 \nosupersub We call this function, i.e. what we put within \uc0\u920 ( here ), the\'a0time complexity\'a0or just\'a0complexity\'a0of our algorithm.
\f7\b0 \'a0So an algorithm with \uc0\u920 ( n ) is of complexity n. We also have special names for \u920 ( 1 ), \u920 ( n ), \u920 ( n
\fs20 \super 2
\fs24 \nosupersub \'a0) and \uc0\u920 ( log( n ) ) because they occur very often. We say that a \u920 ( 1 ) algorithm is a\'a0constant-time algorithm, \u920 ( n ) is\'a0linear, \u920 ( n
\fs20 \super 2
\fs24 \nosupersub \'a0) is\'a0quadratic\'a0and \uc0\u920 ( log( n ) ) is\'a0logarithmic\
\
Programs with a bigger \uc0\u920  run slower than programs with a smaller \u920 .\
\
\
//Time Complexity\
Constant Time: O(1)\
Logarithmic Time: O(log(n))	I\'92m thinking of a number from 1-50\
Linear Time: O(n)\
Linearithmic Time: O(nlog(n))\
Quadratic Time: O(n^2)\
Cubic Time: O(n^3)\
Exponential Time: O(b^n)\
Factorial Time: O(n!)\
\
//Space Complexity\
Booleans/Numbers: O(1)\
Strings, Arrays, Objects: O(n)\
\
Finding all subsets of a set: O(2^n)\
Finding all permutations of a string: O(n!)\
Mergesort: O(nlog(n))\
Iterating over all cells in a matrix of size n by m: O(nm)\
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\b\fs36 \cf4 // Sorting
\f7\b0\fs24 \cf10 \
\pard\pardeftab720\sl340\partightenfactor0

\f1\fs30 \cf17 quicksort, heapsort and mergesort\
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\b\fs36 \cf4 // Shortest Path
\f1\b0\fs30 \cf17 \
\pard\pardeftab720\sl340\partightenfactor0
\cf17 Djikstra\'92s Algorithm (Shortest distance from A to B ie: Google Maps)\
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\b\fs36 \cf4 // Calculate run time of function
\f1\b0\fs30 \cf17 \
\pard\pardeftab720\sl400\partightenfactor0

\f10\fs29\fsmilli14667 \cf10 \cb1 let time1 = Date.now();
\f11\fs24 \

\f10\fs29\fsmilli14667 function();
\f11\fs24 \

\f10\fs29\fsmilli14667 let time2 = Date.now();
\f11\fs24 \

\f10\fs29\fsmilli14667 console.log(`$\{(time2-time1) / 1000\} seconds`);\
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\b\fs36 \cf4 \cb3 // Build Table
\f10\b0\fs29\fsmilli14667 \cf10 \cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf10 \
\pard\pardeftab720\sl420\partightenfactor0

\f4\fs28 \cf8 \cb12 const\cf10  buildTable = (rows, cols) => \{\cb1 \
\cb12 \'a0\'a0\cf8 let\cf10  table = \cf14 \cb12 ""\cf10 \cb12 ;\cb1 \
\cb12 \'a0\'a0\cf8 for\cf10  (\cf8 let\cf10  r=\cf13 0\cf10 ; r<rows; r++) \{\cb1 \
\cb12 \'a0\'a0\'a0\'a0table += \cf14 \cb12 "<tr>"\cf10 \cb1 \
\cb12 \'a0\'a0\'a0\'a0\cf8 for\cf10  (\cf8 let\cf10  c=\cf13 1\cf10 ; c<=cols; c++) \{\cb1 \
\cb12 \'a0\'a0\'a0\'a0\'a0\'a0table += \cf14 \cb12 `<td> \cf10 \cb12 $\{c\}\cf14 \cb12  </td>`\cf10 \cb1 \
\cb12 \'a0\'a0\'a0\'a0\}\cb1 \
\cb12 \'a0\'a0\'a0\'a0table += \cf14 \cb12 "</tr>"\cf10 \cb1 \
\cb12 \'a0\'a0\}\cb1 \
\cb12 \'a0\'a0document.write(\cf14 \cb12 `<table>\cf10 \cb12 $\{table\}\cf14 \cb12 </table>`\cf10 \cb12 )\cb1 \
\cb12 \}\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f10\fs29\fsmilli14667 \cf10 \
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\b\fs36 \cf4 \cb3 // Reverse String
\f1\b0\fs30 \cf17 \
\pard\pardeftab720\sl400\partightenfactor0

\f10\fs29\fsmilli14667 \cf10 \cb1 function reverse(str) \{
\f11\fs24 \

\f10\fs29\fsmilli14667 	return str.split(\'93\'94).reduce((output, char) => \{
\f11\fs24 \

\f10\fs29\fsmilli14667 		output += char;
\f11\fs24 \

\f10\fs29\fsmilli14667 		return output;
\f11\fs24 \

\f10\fs29\fsmilli14667 	\}
\f11\fs24 \

\f10\fs29\fsmilli14667 \}\
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\b\fs36 \cf4 \cb3 // Call, Apply, Bind
\f1\b0\fs30 \cf17 \
\pard\pardeftab720\sl400\partightenfactor0

\f10\fs29\fsmilli14667 \cf10 \cb1 Call - \
Apply - \
Bind - \
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\b\fs36 \cf4 \cb3 // Test Your Code!!!
\f1\b0\fs30 \cf17 \
\pard\pardeftab720\sl400\partightenfactor0

\f10\fs29\fsmilli14667 \cf10 \cb1 \
\pard\pardeftab720\sl420\partightenfactor0

\f4\fs28 \cf8 \cb12 function\cf10  assertEqual(actual, expected, testName) \{\cb1 \
\cb12   \cf8 if\cf10  (actual === expected) \{\cb1 \
\cb12     console.log(\cf14 \cb12 'Passed'\cf10 \cb12 );\cb1 \
\cb12   \} \cf8 else\cf10  \{\cb1 \
\cb12     console.log(\cf14 \cb12 `\cf10 \cb12 $\{testName\}\cf14 \cb12  FAILED. Expected output: \cf10 \cb12 $\{expected\}\cf14 \cb12  but Actual output was: \cf10 \cb12 $\{actual\}\cf14 \cb12 `\cf10 \cb12 )\cb1 \
\cb12   \}\cb1 \
\cb12 \}\cb1 \
\
\cf8 \cb12 function\cf10  multiplyByTwo(num) \{\cb1 \
\cb12   \cf8 return\cf10  num * \cf13 2\cf10 ;\cb1 \
\cb12 \}\cb1 \
\
\cf8 \cb12 let\cf10  actual = multiplyByTwo(\cf13 2\cf10 );\cb1 \
\cf8 \cb12 let\cf10  expected = \cf13 4\cf10 ;\cb1 \
\cf8 \cb12 let\cf10  testName = \cf14 \cb12 'Multiplying by Two'\cf10 \cb1 \
\
\cb12 assertEqual(actual, expected, testName);\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f10\fs29\fsmilli14667 \cf10 \
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\b\fs36 \cf4 \cb3 // Security
\f1\b0\fs30 \cf17 \
\pard\pardeftab720\sl400\partightenfactor0

\f10\fs29\fsmilli14667 \cf10 \cb1 CSRF - Cross-Site Request Forgery is an attack that forces an end user to execute unwanted actions on a web application in which they\'92re currently authenticated.  With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker\'92s choosing\
\
Mitigation Strategies - 1)  Unique form tokens generated on every POST, PUT, DELETE request. 2) Re-authentication (captcha, password)\
\
XSS - Cross Site Scripting is \
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\b\fs36 \cf4 \cb3 // Improve Web Latency
\f1\b0\fs30 \cf17 \
\pard\pardeftab720\sl400\partightenfactor0

\f10\fs29\fsmilli14667 \cf10 \cb1 //BASELINE\
Open \'93Audits\'94 panel (where \'93Console\'94 panel is).  In Audits is Throttling - how the page performs on a mobile device.  You then click the \'93Run Audits\'94 button and that will return a performance evaluation that measures load performance and looks for bottlenecks.  Number at top is your overall score (the higher the better).  \
Below that is the Metrics section.\
Below that is an image section that shows thumbnails of how your page loads.  \
Below that is an Opportunities section that offer specific tips.\
Below that is the Diagnostics section.\
Below that is the Passed Audits section which shows what you\'92re doing well.\
\
 //EXPERIMENT\
Change one thing from Opportunities section\
Run Audit to see if performance improved\
\
1.  Enable Text Compression\
2.  Handling Images\
	a. Resize during build process\
	b. Create multiple sizes and use secret\
	c. Use an image CDN\
3.  Render Blocking (3rd party libraries)\
\
\pard\pardeftab720\sl420\partightenfactor0

\f2\b\fs36 \cf4 \cb3 // Etc Etc Etc
\f1\b0\fs30 \cf17 \
\pard\pardeftab720\sl400\partightenfactor0

\f10\fs29\fsmilli14667 \cf10 \cb1 \'93use strict\'94; - ie if you forget to declare your variable in your for loop (var i) - normally it would then be available outside of the function but use strict will prevent that\
\
Single Threaded - One function can run at a time\
\
Idempotence - Operations that perform the same task no matter how many times you call them ie GET, HEAD, OPTIONS requests \
\
Execution Context - 1st phase is Creation, 2nd phase is Execution\
1.  Create a global object\
2.  Create an object called \'93this\'94\
3.  Set up memory space for variables and functions\
4.  Assign variable declarations a default value of \'93undefined\'94 while placing function declarations in memory\
\
//Clone an Object\
Shallow - slice, concat, spread operator, Object.create, Object.assign, Array.from\
clonedObj = Object.assign(\{\}, cloneTarget) or clonedObj =  \{ \'85object \}\
Deep - JSON.parse(JSON.stringify())\
\pard\pardeftab720\sl340\partightenfactor0

\f1\fs36 \cf0 \cb3 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf2 //Interview Tips\
\pard\pardeftab720\sl480\partightenfactor0

\f6\b0\fs42 \cf16 \expnd0\expndtw0\kerning0
1.  Speak out loud\
2.  Ask clarification questions\
3.  Call out assumptions\
4.  Explain thoughts clearly before jumping into coding\
5.  What are your edge cases?  Will anything be null?  \
6.  Find a solution as opposed to no solution\
7.  Google tech dev guide\
8.  Get used to coding on white board\
9.  Know the basic data structures and algorithms really well\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf2 \kerning1\expnd0\expndtw0 //What you should fully comprehend\
\pard\pardeftab720\sl480\partightenfactor0

\f6\b0\fs42 \cf16 \expnd0\expndtw0\kerning0
Data Structures (a way of organizing data so that it can be used effectively) to know:\
Arrays\
Linked Lists\
Stacks\
Queues\
Sets\
Maps\
Binary Heaps\
Trie (Prefix Tree)\
Graphs
\f0\b\fs36 \cf2 \kerning1\expnd0\expndtw0 \
\

\f6\b0\fs42 \cf16 \expnd0\expndtw0\kerning0
Algorithms to know how to code:\
Sorting, searching, binary search\
Divide-and-conquer\
Dynamic programming and memoization\
Greedy algorithms\
Recursion\
Graph traversal BFS DFS\
Pattern matching\
\
Algorithms to conceptually understand:\
Dijkstra\'92s\
Floyd-Warshall\
Traveling Salesman\
A*\
bloom filter\
breadth-first iterative search\
binary search\
k-way merge\
bubble/selection/insertion sort\
in-place quick sort\
bucket/radix sort\
closest pair
\f0\b\fs36 \cf2 \kerning1\expnd0\expndtw0 \
}