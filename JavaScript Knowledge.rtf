{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 HelveticaNeue-Bold;\f5\fnil\fcharset0 Monaco;
\f6\fnil\fcharset0 Menlo-Bold;\f7\fnil\fcharset0 Georgia;\f8\fnil\fcharset0 TrebuchetMS;
\f9\fnil\fcharset0 AppleSymbols;\f10\fnil\fcharset0 TrebuchetMS-Bold;\f11\fswiss\fcharset0 ArialMT;
\f12\froman\fcharset0 Times-Roman;\f13\fswiss\fcharset0 Arial-BoldMT;\f14\fswiss\fcharset0 Arial-ItalicMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue255;\red66\green1\blue120;
\red38\green38\blue38;\red0\green0\blue255;\red0\green0\blue0;\red19\green120\blue72;\red251\green2\blue7;
\red144\green1\blue18;\red154\green154\blue154;\red32\green35\blue35;\red27\green29\blue31;\red0\green0\blue0;
\red49\green49\blue50;\red255\green255\blue254;\red14\green110\blue109;\red12\green99\blue153;\red135\green91\blue44;
\red210\green50\blue85;\red135\green135\blue135;\red85\green138\blue3;\red133\green0\blue67;\red93\green108\blue125;
\red191\green28\blue37;\red121\green213\blue255;\red149\green155\blue194;\red26\green26\blue26;\red27\green36\blue51;
}
{\*\expandedcolortbl;;\cssrgb\c1680\c19835\c100000;\cssrgb\c100000\c100000\c100000;\cssrgb\c33333\c10196\c54510;
\cssrgb\c20000\c20000\c20000;\cssrgb\c0\c0\c100000;\cssrgb\c0\c0\c0;\cssrgb\c3529\c53333\c35294;\cssrgb\c100000\c14913\c0;
\cssrgb\c63922\c8235\c8235;\cssrgb\c66667\c66667\c66667;\cssrgb\c16471\c18039\c18039;\cssrgb\c14118\c15294\c16078;\cssrgb\c0\c0\c0\c84314;
\cssrgb\c25098\c25098\c25490;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c50196\c50196;\cssrgb\c0\c46667\c66667;\cssrgb\c60392\c43137\c22745;
\cssrgb\c86667\c29020\c40784;\cssrgb\c60000\c60000\c60000;\cssrgb\c40000\c60000\c0;\cssrgb\c60000\c0\c33333;\cssrgb\c43922\c50196\c56471;
\cssrgb\c80392\c19216\c19216;\cssrgb\c53725\c86667\c100000;\cssrgb\c65098\c67451\c80392;\cssrgb\c13333\c13333\c13333;\cssrgb\c13725\c19216\c26275;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\vieww14780\viewh17440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf2 \cb3 //Popular Array Methods
\f1\b0 \cf0 \
\
from() - creates an array from something let newArray = Array.from(something)\
slice() - Returns a portion of the array as a second array - does not modify. Array.slice(from, until)\
splice() - Modifies the array		Array.splice(idx, howMany)\
filter() filters items out of an array (does NOT create a new array)\
map() create a new array from current array\
find() find and return a single object in an array\
	let match = cities.find(item => \{\
		if (city === item) return true\
	\})\
some() returns a true/false statement based on if at least one element in the array passes the condition\
every() returns a true/false statement based on if all elements pass the condition\
reduce() \
includes() items.include(2) // return boolean\
for in - iterate over the properties of an object (keys) or to iterate over index values of an array/string\
for of - Iterate over the values in maps, sets, arrays or strings\
concat() used to join two arrays:\
	let array1 = ["Cecilie", "Lone"];\
  	let array2 = ["Emil", "Tobias", "Linus"];\
 	let children = array1.concat(array2); \
sort() returns 1 or -1\
\
//sorts in ascending order\
const sortAges = ages.sort((a,b) => a - b) \
\

\f0\b \cf2 // Map and Set (Native methods)
\f1\b0 \cf0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf4 \expnd0\expndtw0\kerning0
Map i\cf5 s a collection of keyed data items, just like an\'a0
\f3 Object
\f2 . But the main difference is that\'a0
\f3 Map
\f2 \'a0allows keys of any type.\
Methods and properties are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa96\partightenfactor0
\ls1\ilvl0
\f3 \cf5 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
new Map()
\f2 \'a0\'96 creates the map.\
\ls1\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.set(key, value)
\f2 \'a0\'96 stores the value by the key.\
\ls1\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.get(key)
\f2 \'a0\'96 returns the value by the key,\'a0
\f3 undefined
\f2 \'a0if\'a0
\f3 key
\f2 \'a0doesn\'92t exist in map.\
\ls1\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.has(key)
\f2 \'a0\'96 returns\'a0
\f3 true
\f2 \'a0if the\'a0
\f3 key
\f2 \'a0exists,\'a0
\f3 false
\f2 \'a0otherwise.\
\ls1\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.delete(key)
\f2 \'a0\'96 removes the value by the key.\
\ls1\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.clear()
\f2 \'a0\'96 removes everything from the map.\
\ls1\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.size
\f2 \'a0\'96 returns the current element count.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa96\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf2 \kerning1\expnd0\expndtw0 //Iteration over a Map
\f4 \cf5 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf5 For looping over a\'a0
\f3 map
\f2 , there are 3 methods:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa96\partightenfactor0
\ls2\ilvl0
\f3 \cf5 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.keys()
\f2 \'a0\'96 returns an iterable for keys,\
\ls2\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.values()
\f2 \'a0\'96 returns an iterable for values,\
\ls2\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
map.entries()
\f2 \'a0\'96 returns an iterable for entries\'a0
\f3 [key, value]
\f2 , it\'92s used by default in\'a0
\f3 for..of
\f2 .\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf5 \expnd0\expndtw0\kerning0
A\'a0
\f3 Set
\f2 \'a0is a special type collection \'96 \'93set of values\'94 (without keys), where each value may occur only once.\
Its main methods are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa96\partightenfactor0
\ls3\ilvl0
\f3 \cf5 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
new Set(iterable)
\f2 \'a0\'96 creates the set, and if an\'a0
\f3 iterable
\f2 \'a0object is provided (usually an array), copies values from it into the set.\
\ls3\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.add(value)
\f2 \'a0\'96 adds a value, returns the set itself.\
\ls3\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.delete(value)
\f2 \'a0\'96 removes the value, returns\'a0
\f3 true
\f2 \'a0if\'a0
\f3 value
\f2 \'a0existed at the moment of the call, otherwise\'a0
\f3 false
\f2 .\
\ls3\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.has(value)
\f2 \'a0\'96 returns\'a0
\f3 true
\f2 \'a0if the value exists in the set, otherwise\'a0
\f3 false
\f2 .\
\ls3\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.clear()
\f2 \'a0\'96 removes everything from the set.\
\ls3\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.size
\f2 \'a0\'96 is the elements count.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf5 \expnd0\expndtw0\kerning0
The same methods\'a0
\f3 Map
\f2 \'a0has for iterators are also supported:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa96\partightenfactor0
\ls4\ilvl0
\f3 \cf5 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.keys()
\f2 \'a0\'96 returns an iterable object for values,\
\ls4\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.values()
\f2 \'a0\'96 same as\'a0
\f3 set.keys()
\f2 , for compatibility with\'a0
\f3 Map
\f2 ,\
\ls4\ilvl0
\f3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
set.entries()
\f2 \'a0\'96 returns an iterable object for entries\'a0
\f3 [value, value]
\f2 , exists for compatibility with\'a0
\f3 Map
\f2 .\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 \

\f0\b \cf2 //Cracking the Coding Interview
\f1\b0 \cf0 \
Ch 1-5 and 7-10\
Big O and chapter 1\
Hints for algorithms\
\

\f0\b \cf2 Dynamic Programming
\f1\b0 \cf0 \
\
Dynamic Programming - Problems that have optimal substructure and overlapping subproblems\
You can break a problem down into smaller and smaller chunks and then combine them to get the optimal solutions.  If we can solve the problem recursively, it has optimal substructure\
\
The other component is where dynamic programs really shines.  Memoization - caching values\
\

\f0\b \cf2 Recursion/Memoization
\f1\b0 \cf0 \
Recursion is a function that calls itself\'85 until it doesn\'92t.  It needs a break point\
Memoization - Optimization technique used by storing/caching the results of expensive functions\
\
Fibonacci: O(2^n) without memoization O(n)\
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf6 \expnd0\expndtw0\kerning0
function\cf7  fibonacci(n, memo = \{\}) \{\
    \cf6 if\cf7  (n <= \cf8 1\cf7 ) \{\
        \cf6 return\cf7  \cf8 1\cf7 \
    \} \cf6 else\cf7  \{\
      memo[n] = fibonacci(n - \cf8 1\cf7 , memo) + fibonacci(n - \cf8 2\cf7 , memo)\
    \}\
    \cf6 return\cf7  memo[n]\
\}\
\pard\pardeftab720\sl460\partightenfactor0
\cf7 \
//Backtracking\
Backtracking is a method to solve problems by making a series of choices that we can return or backtrack to.  The call stack remembers our choices and knows what to choose next.\
1.  Our Choice: What choice do we make at each call of the function (recursion represents decisions)\
2.  Our Constraints: When do we stop following a certain path?\
3.  Our Goal: What is our target?  What are we trying to find? (\cf9 This is where the base case comes from\cf7 )\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\fs72 \cf9 \kerning1\expnd0\expndtw0 Anytime you see \'93print all\'94 \'93return all\'94 \'93compute all\'94 - it\'92s going to use backtracking/recursion
\fs28 \cf0 \
\
Anything that can be written recursively *can* be written iteratively\
Fibonacci \'97> fib(n) = fib(n-1) + fib(n-2)\
The 6 Patterns: \
	Each pattern provides a basic framework\
	Once you understand the framework, you can fit all problems into one of these frameworks\
	These patterns overlap extensively - find the pattern that works for you\
	All patterns are based on basic recursive principles\
1. Iteration\
	Iterate over an array/list using recursion\
	Rarely useful except for simplifying code\
	Examples:\
		Print a Linked List in reverse order\
		Factorial\
		Any time when you might use a for loop\
2. Breaking Into Subproblems\
	Classic recursive problems\
	Use this pattern when it makes sense to you\
	Examples:\
		Towers of Hanoi\
		Fibonacci\
3. Selection (Combinations)\
	Fundamentally, problems that can be solved by finding all valid combinations\
	Brute force - find and validate every combination\
	Optimize by validating as we go/backtracking\
	Examples:\
		Knapsack Problem\
		Word Break\
		Phone Spell\
		N Queens\
4. Ordering (Permutations)\
	Similar to selection except order matters\
	Brute force - find all permutations and validate which is best/matches our conditions\
	Examples:\
		Find all permutations of inputs\
		Find all N-digit numbers whose digits sum to a specific value\
		Word squares\
5. Divide and Conquer\
	Can we solve the problem for each half of the input and easily combine the results?\
	Common with searching, sorting, trees\
	Examples:\
		Mergesort\
		Generate all Binary Search Trees for a set of items\
		Find all valid parentheses\
6. Depth First Search\
	Common technique with tree/graph structures\
	Can be used for many different recursive problems\
	Examples:\
		Search in a tree\
		Probability of a knight on a chessboard\
\
\
Space complexity = memory usage (creating arrays for instance)\
\
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf6 \expnd0\expndtw0\kerning0
function\cf7  countDown(n) \{\
  \cf6 for\cf7  (\cf6 let\cf7  i = n; i > \cf8 0\cf7 ; i--) \{\
    console.log(i)\
  \}\
  console.log(\cf10 'Hooray'\cf7 )\
\}\
\
\cf6 function\cf7  countDownRecursive(n) \{\
  \cf6 if\cf7  (n <= \cf8 0\cf7 ) \{\
    console.log(\cf10 'Hooray'\cf7 )\
    \cf6 return\cf7 \
  \}\
\
  console.log(n)\
  countDownRecursive(n - \cf8 1\cf7 )\
\}\
\
\cf6 function\cf7  sumRange(n) \{\
  \cf6 let\cf7  total = \cf8 0\cf7 ;\
  \cf6 for\cf7  (\cf6 let\cf7  i = n; i > \cf8 0\cf7 ; i--) \{\
    total += i\
  \}\
  \cf6 return\cf7  total\
\}\
\
\cf6 function\cf7  sumRangeRecursive(n, total = \cf8 0\cf7 ) \{\
  \cf6 if\cf7  (n <= \cf8 0\cf7 ) \{\
    \cf6 return\cf7  total\
  \}\
  \cf6 return\cf7  sumRangeRecursive(n - \cf8 1\cf7 , total + n)\
\}\
\
\cf6 function\cf7  printChildren(t) \{\
  \cf11 // ???\cf7 \
\}\
\
\cf6 const\cf7  printChildrenRecursive = tree => \{\
  \cf6 if\cf7  (tree.children.length === \cf8 0\cf7 ) \{\
    \cf6 return\cf7 \
  \} \
  tree.children.forEach(child => \{\
    console.log(child.name)\
    printChildrenRecursive(child)\
  \})\
\}\
\
\cf6 const\cf7  tree = \{\
  name: \cf10 'John'\cf7 ,\
  children: [\
    \{\
      name: \cf10 'Jim'\cf7 ,\
      children: []\
    \},\
    \{\
      name: \cf10 'Zoe'\cf7 ,\
      children: [\
        \{ name: \cf10 'Kyle'\cf7 , children: [] \},\
        \{ name: \cf10 'Sophia'\cf7 , children: [] \}\
      ]\
    \}\
  ]\
\}\
\
printChildrenRecursive(tree)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf2 \kerning1\expnd0\expndtw0 Random Hex Color Generator
\f3\b0 \cf7 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl420\partightenfactor0

\f5\fs24 \cf12 \cb1 "#" + Math.random().toString(16).slice(2, 8)\
\pard\pardeftab720\sl420\partightenfactor0

\f3\fs28 \cf7 \cb3 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf2 \kerning1\expnd0\expndtw0 DFS vs BFS
\f1\b0 \cf0 \
DFS uses: backtracking, complete search, exhausting possible paths.  GOES DEEP.  \
BFS uses: Check if path exists between nodes, finding hops or how many levels away a node is.  GOES WIDE\
\

\f0\b \cf2 Reg Ex
\f1\b0 \cf0 \
\
Regular Expression - Sequence of characters (pattern) that define a specific search pattern\
\pard\pardeftab720\partightenfactor0

\f3\fs26 \cf13 \cb1 \expnd0\expndtw0\kerning0
"^[a-zA-Z0-9_]*$"
\f1\fs28 \cf0 \cb3 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b \cf2 Number Methods/Math Object
\f1\b0 \cf0 \
\
toFixed() - \
valueOf() - Calculates the value of the () behind it		(100 + 23).valueOf() = 123\
\
Math.random() - this will get a random number between 0 and 1\
Math.round(9.6) - this will round up to 10\
Math.ceil(4.4) - this will force number to round up to 5\
Math.floor(4.7) - this will force number to round down to 4\
Math.pow(8, 2) - \
Math.sqrt(64) - \
Math.PI;\
\
\pard\pardeftab720\sl420\partightenfactor0

\f6\b \cf9 \expnd0\expndtw0\kerning0
// BIG O
\f7\b0 \cf14 \
\pard\pardeftab720\sl280\partightenfactor0

\f8 \cf7 Algorithm complexity is just a way to formally measure how fast a program or algorithm runs\
\
Algorithms - Ideas of how something is computed\
\pard\pardeftab720\sl340\partightenfactor0

\f1 \cf15 \'a0\'93an algorithm is any well-defined computational procedure that takes some value, or set of values, as input and produces some value, or set of values as output.\'94\
\pard\pardeftab720\sl340\partightenfactor0

\f8 \cf7 \
\pard\pardeftab720\sl280\partightenfactor0
\cf7 Asymptotic behavior - This filter of "dropping all factors" and of "keeping the largest growing term"\
\
Simple programs can be analyzed by counting the nested loops of the program. A single loop over n items yields f( n ) = n. A loop within a loop yields f( n ) = n\super 2\nosupersub . A loop within a loop within a loop yields f( n ) = n\super 3\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls5\ilvl0\cf7 \kerning1\expnd0\expndtw0 \nosupersub {\listtext	1.	}\expnd0\expndtw0\kerning0
n\super 6\nosupersub \'a0+ 3n 
\f9 \uc0\u8712 
\f8  \uc0\u920 ( n\super 6\nosupersub \'a0)\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
2\super n\nosupersub \'a0+ 12 
\f9 \uc0\u8712 
\f8  \uc0\u920 ( 2\super n\nosupersub \'a0)\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
3\super n\nosupersub \'a0+ 2\super n\nosupersub \'a0
\f9 \uc0\u8712 
\f8  \uc0\u920 ( 3\super n\nosupersub \'a0)\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4.	}\expnd0\expndtw0\kerning0
n\super n\nosupersub \'a0+ n 
\f9 \uc0\u8712 
\f8  \uc0\u920 ( n\super n\nosupersub \'a0)\
\pard\pardeftab720\sl280\partightenfactor0
\cf7 \super \
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf7 \nosupersub We call this function, i.e. what we put within \uc0\u920 ( here ), the\'a0time complexity\'a0or just\'a0complexity\'a0of our algorithm.
\f8\b0 \'a0So an algorithm with \uc0\u920 ( n ) is of complexity n. We also have special names for \u920 ( 1 ), \u920 ( n ), \u920 ( n\super 2\nosupersub \'a0) and \uc0\u920 ( log( n ) ) because they occur very often. We say that a \u920 ( 1 ) algorithm is a\'a0constant-time algorithm, \u920 ( n ) is\'a0linear, \u920 ( n\super 2\nosupersub \'a0) is\'a0quadratic\'a0and \uc0\u920 ( log( n ) ) is\'a0logarithmic\
\
Programs with a bigger \uc0\u920  run slower than programs with a smaller \u920 .\
\
\
//Time Complexity\
Constant Time: O(1)\
Logarithmic Time: O(log(n))	I\'92m thinking of a number from 1-50\
Linear Time: O(n)\
Linearithmic Time: O(nlog(n))\
Quadratic Time: O(n^2)\
Cubic Time: O(n^3)\
Exponential Time: O(b^n)\
Factorial Time: O(n!)\
\
//Space Complexity\
Booleans/Numbers: O(1)\
Strings, Arrays, Objects: O(n)\
\
Finding all subsets of a set: O(2^n)\
Finding all permutations of a string: O(n!)\
Mergesort: O(nlog(n))\
Iterating over all cells in a matrix of size n by m: O(nm)\
\
\pard\pardeftab720\sl420\partightenfactor0

\f6\b \cf9 // Sorting
\f8\b0 \cf7 \
\pard\pardeftab720\sl340\partightenfactor0

\f1 \cf15 quicksort, heapsort and mergesort\
\
\pard\pardeftab720\sl420\partightenfactor0

\f6\b \cf9 // Shortest Path
\f1\b0 \cf15 \
\pard\pardeftab720\sl340\partightenfactor0
\cf15 Djikstra\'92s Algorithm (Shortest distance from A to B ie: Google Maps)\
\
\pard\pardeftab720\sl420\partightenfactor0

\f6\b \cf9 // Calculate run time of function
\f1\b0 \cf15 \
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 let time1 = Date.now();
\f12 \

\f11 function();
\f12 \

\f11 let time2 = Date.now();
\f12 \

\f11 console.log(`$\{(time2-time1) / 1000\} seconds`);\
\
\pard\pardeftab720\sl420\partightenfactor0

\f6\b \cf9 // Build Table
\f11\b0 \cf7 \
\pard\pardeftab720\sl400\partightenfactor0
\cf7 \
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf6 const\cf7  buildTable = (rows, cols) => \{\
\'a0\'a0\cf6 let\cf7  table = \cf10 ""\cf7 ;\
\'a0\'a0\cf6 for\cf7  (\cf6 let\cf7  r=\cf8 0\cf7 ; r<rows; r++) \{\
\'a0\'a0\'a0\'a0table += \cf10 "<tr>"\cf7 \
\'a0\'a0\'a0\'a0\cf6 for\cf7  (\cf6 let\cf7  c=\cf8 1\cf7 ; c<=cols; c++) \{\
\'a0\'a0\'a0\'a0\'a0\'a0table += \cf10 `<td> \cf7 $\{c\}\cf10  </td>`\cf7 \
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0table += \cf10 "</tr>"\cf7 \
\'a0\'a0\}\
\'a0\'a0document.write(\cf10 `<table>\cf7 $\{table\}\cf10 </table>`\cf7 )\
\}\
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 \
\
\pard\pardeftab720\sl420\partightenfactor0

\f6\b \cf9 // Reverse String
\f1\b0 \cf15 \
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 function reverse(str) \{
\f12 \

\f11 	return str.split(\'93\'94).reduce((output, char) => \{
\f12 \

\f11 		output += char;
\f12 \

\f11 		return output;
\f12 \

\f11 	\}
\f12 \

\f11 \}\
\
\pard\pardeftab720\sl420\partightenfactor0

\f6\b \cf9 // Call, Apply, Bind
\f1\b0 \cf15 \
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 Call - \
Apply - \
Bind - \
\
\pard\pardeftab720\sl420\partightenfactor0

\f6\b \cf9 // Test Your Code!!!
\f1\b0 \cf15 \
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 \
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf6 function\cf7  assertEqual(actual, expected, testName) \{\
  \cf6 if\cf7  (actual === expected) \{\
    console.log(\cf10 'Passed'\cf7 );\
  \} \cf6 else\cf7  \{\
    console.log(\cf10 `\cf7 $\{testName\}\cf10  FAILED. Expected output: \cf7 $\{expected\}\cf10  but Actual output was: \cf7 $\{actual\}\cf10 `\cf7 )\
  \}\
\}\
\
\cf6 function\cf7  multiplyByTwo(num) \{\
  \cf6 return\cf7  num * \cf8 2\cf7 ;\
\}\
\
\cf6 let\cf7  actual = multiplyByTwo(\cf8 2\cf7 );\
\cf6 let\cf7  expected = \cf8 4\cf7 ;\
\cf6 let\cf7  testName = \cf10 'Multiplying by Two'\cf7 \
\
assertEqual(actual, expected, testName);\
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 \
\
\pard\pardeftab720\sl420\partightenfactor0

\f6\b \cf9 // Security
\f1\b0 \cf15 \
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 CSRF - Cross-Site Request Forgery is an attack that forces an end user to execute unwanted actions on a web application in which they\'92re currently authenticated.  With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker\'92s choosing\
\
Mitigation Strategies - 1)  Unique form tokens generated on every POST, PUT, DELETE request. 2) Re-authentication (captcha, password)\
\
\pard\pardeftab720\sl400\partightenfactor0

\f13\b \cf7 How do I prevent XSS (cross-site scripting)?
\f11\b0 \
1. Encode data on output\
2.  Validate input on arrival\
\
\
\
\pard\pardeftab720\sl420\partightenfactor0

\f6\b \cf9 // Improve Web Latency
\f1\b0 \cf15 \
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 //BASELINE\
Open \'93Audits\'94 panel (where \'93Console\'94 panel is).  In Audits is Throttling - how the page performs on a mobile device.  You then click the \'93Run Audits\'94 button and that will return a performance evaluation that measures load performance and looks for bottlenecks.  Number at top is your overall score (the higher the better).  \
Below that is the Metrics section.\
Below that is an image section that shows thumbnails of how your page loads.  \
Below that is an Opportunities section that offer specific tips.\
Below that is the Diagnostics section.\
Below that is the Passed Audits section which shows what you\'92re doing well.\
\
 //EXPERIMENT\
Change one thing from Opportunities section\
Run Audit to see if performance improved\
\
1.  Enable Text Compression\
2.  Handling Images\
	a. Resize during build process\
	b. Create multiple sizes and use secret\
	c. Use an image CDN\
3.  Render Blocking (3rd party libraries)\
\
\pard\pardeftab720\sl420\partightenfactor0

\f6\b \cf9 // Etc Etc Etc
\f1\b0 \cf15 \
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 \'93use strict\'94; - ie if you forget to declare your variable in your for loop (var i) - normally it would then be available outside of the function but use strict will prevent that\
\
Single Threaded - One function can run at a time\
\
Idempotence - Operations that perform the same task no matter how many times you call them ie GET, HEAD, OPTIONS requests \
\
Execution Context - 1st phase is Creation, 2nd phase is Execution\
1.  Create a global object\
2.  Create an object called \'93this\'94\
3.  Set up memory space for variables and functions\
4.  Assign variable declarations a default value of \'93undefined\'94 while placing function declarations in memory\
\
//Clone an Object\
Shallow - slice, concat, spread operator, Object.create, Object.assign, Array.from\
clonedObj = Object.assign(\{\}, cloneTarget) or clonedObj =  \{ \'85object \}\
Deep - JSON.parse(JSON.stringify())\
\
//Polyfill\
Small piece of code used to allow old browsers to run modern code\
\
//Hexadecimal\
FF3300 \'97> RGB \'97> R(FF) G(33) B(00)\
\
//Bitwise Operators\
Shifts are used to shift colors around in hexadecimal values.  ex: take the green out of hex (middle numbers)\
Shift Right\
101010 >> 2 // 1010\
Shift Left\
7 << 1 is the same as 7 * 2 // 14\
\
//&& \
Logical AND returns left operand if it can be converted to false; otherwise, returns right operand\
\
//Get last item in array\
arr.slice(-1)\
\
//Binary Search Tree\
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf6 \cb16 let\cf7  binarySearch = (arr, x) => \{\cb1 \
\cb16   \cf6 let\cf7  start = \cf8 0\cf7 ;\cb1 \
\cb16   \cf6 let\cf7  end = arr.length - \cf8 1\cf7 ;\cb1 \
\
\cb16   \cf6 while\cf7  (start <= end) \{\cb1 \
\cb16     \cf6 let\cf7  mid = \cf17 Math\cf7 .floor((start + end) / \cf8 2\cf7 )\cb1 \
\
\cb16     \cf6 if\cf7  (arr[mid] === x) \cf6 return\cf7  \cf6 true\cf7 ;\cb1 \
\cb16     \cf6 if\cf7  (arr[mid] < x) start = mid + \cf8 1\cf7 ;\cb1 \
\cb16     \cf6 if\cf7  (arr[mid] > x) end = mid - \cf8 1\cf7 ;\cb1 \
\cb16   \}\cb1 \
\
\cb16   \cf6 return\cf7  \cf6 false\cf7 ;\cb1 \
\cb16 \}
\f11 \cb3 \
\pard\pardeftab720\sl400\partightenfactor0
\cf7 \
//Make Change\
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf6 \cb16 let\cf7  makeChange = (amount, coins, bag = []) => \{\cb1 \
\cb16   \cf6 if\cf7  (amount === \cf8 0\cf7 ) \cf6 return\cf7  bag;\cb1 \
\cb16   \cf6 let\cf7  largestCoin = getLargestCoin(amount, coins)\cb1 \
\cb16   \cf6 return\cf7  makeChange(amount - largestCoin, coins, bag.concat([largestCoin]));\cb1 \
\cb16 \}\cb1 \
\
\cf6 \cb16 let\cf7  getLargestCoin = (amount, coins) => \{\cb1 \
\cb16   \cf6 let\cf7  sortedCoins = coins.sort((a,b) => a - b);\cb1 \
\cb16   \cf6 for\cf7  (\cf6 let\cf7  i = sortedCoins.length; i >= \cf8 0\cf7 ; i--) \{\cb1 \
\cb16     \cf6 if\cf7  (sortedCoins[i] <= amount) \cf6 return\cf7  sortedCoins[i]\cb1 \
\cb16   \}\cb1 \
\cb16   \cf6 throw\cf7  \cf6 new\cf7  \cf17 Error\cf7 (\cf10 'No coin is divisbly by that amount.'\cf7 )\cb1 \
\cb16 \}\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 \cb3 \
//Try, Catch, Throw, Finally\
try - lets you test a block of code for errors\
catch - lets you handle the error\
throw - lets you create custom errors // throw \'93Too big\'94 or throw 500\
finally - lets you execute code after try and catch, regardless of the result\
\
//Date Object\
new Date() creates a new Date object\
Date.now() returns epoch time value\
Date.parse() parses a string representation of a date and returns epoch time value\
Date.getDate() returns the day of the month (1-31)\
Date.getDay() returns the day of the week (0-6)\
Date.getFullYear() returns 4 digit year\
\
\pard\pardeftab720\sl480\partightenfactor0

\f5\fs32 \cf18 let\cf5  today \cf19 =\cf5  \cf18 new\cf5  \cf20 Date\cf21 ()\cf5 \
\cf18 let\cf5  birthday \cf19 =\cf5  \cf18 new\cf5  \cf20 Date\cf21 (\cf22 'December 17, 1995 03:24:00'\cf21 )\cf5 \
\cf18 let\cf5  birthday \cf19 =\cf5  \cf18 new\cf5  \cf20 Date\cf21 (\cf22 '1995-12-17T03:24:00'\cf21 )\cf5 \
\cf18 let\cf5  birthday \cf19 =\cf5  \cf18 new\cf5  \cf20 Date\cf21 (\cf23 1995\cf21 ,\cf5  \cf23 11\cf21 ,\cf5  \cf23 17\cf21 )\cf5  \cf24 // the month is 0-indexed\cf5 \
\cf18 let\cf5  birthday \cf19 =\cf5  \cf18 new\cf5  \cf20 Date\cf21 (\cf23 1995\cf21 ,\cf5  \cf23 11\cf21 ,\cf5  \cf23 17\cf21 ,\cf5  \cf23 3\cf21 ,\cf5  \cf23 24\cf21 ,\cf5  \cf23 0\cf21 )\cf5 \
\pard\pardeftab720\sl400\partightenfactor0

\f11\fs28 \cf7 \
\pard\pardeftab720\sl480\partightenfactor0

\f5\fs32 \cf18 let\cf5  seconds \cf19 =\cf5  Math\cf21 .\cf20 floor\cf21 (\cf5 Date\cf21 .\cf20 now\cf21 ()\cf5  \cf19 /\cf5  \cf23 1000\cf21 )\cf5 \
\pard\pardeftab720\sl400\partightenfactor0

\f11\fs28 \cf7 \
//Global Object\
let prop = 95\
console.log(window.prop) //undefined because let does not create a property on the global object (var does).\
\
//Console Tricks\
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf7 \cb16 console.time(\cf25 \'93\cf7 string\cf25 \'94\cf7 )\cb1 \
\cb16 setTimeout(() => \{\cb1 \
\cb16   console.timeEnd(\cf25 \'93\cf7 string\cf25 \'94\cf7 )\cb1 \
\cb16 \}, \cf8 5000\cf7 )
\f11 \cb3 \
\pard\pardeftab720\sl400\partightenfactor0
\cf7 \
console.table(object, [\'91key1\'92, \'91key2\'92])\
console.table(person, [\'91age\'92, \'91eyeColor\'92]\
\
//JSON\
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf6 \cb16 const\cf7  engineer = \{\cb1 \
\cb16   name: \cf10 "Adam"\cf7 ,\cb1 \
\cb16   age: \cf8 35\cf7 ,\cb1 \
\cb16   lovesSeinfeld: \cf6 true\cf7 \cb1 \
\cb16 \}\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 \cb3 \
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf6 \cb16 const\cf7  objToStr = \cf17 JSON\cf7 .stringify(engineer)\
\cf6 const\cf7  strToObj = \cf17 JSON\cf7 .parse(objToStr)\cb1 \
\
\cb16 //Sort lexicographically\
To compare strings alphabetically, use localeCompare().  This returns a negative value if the reference string is lexicographically (alphabetically) before the compared string (the parameter), a positive value if it comes afterward, and a value of 0 if they are equal\
\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 \cb3 //Center a div\
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf7 \cb16 <div \cf6 class\cf7 =\cf10 "out"\cf7 >\cb1 \
\cb16   <div \cf6 class\cf7 =\cf10 "in"\cf7 ></div>\cb1 \
\cb16 </div>\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f11 \cf7 \cb3 \
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf7 \cb16 .\cf2 out\cf7  \{\cb1 \
\cb16   height: \cf8 300\cf7 px;\cb1 \
\cb16   border: \cf8 1\cf7 px solid green;\cb1 \
\cb16   position: relative;\cb1 \
\cb16 \}\cb1 \
\
\cb16 .\cf6 in\cf7  \{\cb1 \
\cb16   width: \cf8 100\cf7 px;\cb1 \
\cb16   border: \cf8 1\cf7 px solid red;\cb1 \
\cb16   position: absolute;\cb1 \
\cb16   top: \cf8 50\cf7 %;\cb1 \
\cb16   left: \cf8 50\cf7 %;\cb1 \
\cb16   transform:translate(-\cf8 50\cf7 %, -\cf8 50\cf7 %);\cb1 \
\cb16 \}\cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\fs24 \cf26 \cb3 \
\cf7 //Center a div with Flexbox\
\pard\pardeftab720\sl420\partightenfactor0

\fs28 \cf7 \cb16 .\cf2 out\cf7  \{\cb1 \
\cb16   display: flex;\cf2 \cb1 \
\cf7 \cb16   align-items: center;\cb1 \
\cb16   justify-content: center;\cb1 \
\cb16 \}\cb1 \
\
\cb16 .\cf6 in\cf7  \{\cb1 \
\cb16   width: \cf8 100\cf7 px;\cb1 \
\cb16   height: \cf8 100\cf7 px;\cb1 \
\cb16 \}\cb1 \
\pard\pardeftab720\sl420\partightenfactor0

\fs24 \cf27 \
\pard\pardeftab720\sl400\partightenfactor0

\f11\fs28 \cf7 \cb3 //CSS box-model property\
Margin \'97> Border \'97> Padding \'97> Content\
\
\pard\pardeftab720\sl340\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 //Triangle in CSS\
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf7 \cb16 \expnd0\expndtw0\kerning0
<div \cf6 class\cf7 =\cf10 "triangle"\cf7 >\cb1 \
\cb16 </div>\cb1 \
\pard\pardeftab720\sl340\partightenfactor0

\f1 \cf0 \cb3 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sl420\partightenfactor0

\f3 \cf7 \cb16 \expnd0\expndtw0\kerning0
.\cf2 triangle\cf7  \{\cb1 \
\cb16   height: \cf8 0\cf7 px;\cb1 \
\cb16   width: \cf8 0\cf7 px;\cb1 \
\cb16   border-top: \cf8 100\cf7 px solid transparent;\cb1 \
\cb16   border-bottom: \cf8 100\cf7 px solid transparent;\cb1 \
\cb16   border-right: \cf8 100\cf7 px solid yellow;\cb1 \
\cb16 \}\cb1 \
\pard\pardeftab720\sl340\partightenfactor0

\f1 \cf0 \cb3 \kerning1\expnd0\expndtw0 \
//Web Browser Engines\
Brave - Blink & V8\
Edge - Blink & V8\
Chrome - Blink\
Firefox - Gecko (FASTEST)\
\
//Frameworks pros vs cons\
UI Frameworks (Bootstrap, Bulma, Material)\
\pard\pardeftab720\sl340\partightenfactor0
\cf2 Pros\cf0 : Faster development & prototyping, responsive by default, browser compatibility\
\pard\pardeftab720\sl340\partightenfactor0
\cf9 Cons\cf0 : Less customization, many sites look alike, lots of style overriding\
\
Frontend Frameworks (Vue, React, Angular)\
\pard\pardeftab720\sl340\partightenfactor0
\cf2 Pros\cf0 : Much less work for larger apps, component based, robust data/state management\
\pard\pardeftab720\sl340\partightenfactor0
\cf9 Cons\cf0 : Adds complexity for simple projects, less freedom, updates can introduce issues\
\
//Internet Explorer Disadvantages\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa80\partightenfactor0
\ls6\ilvl0
\f11\fs32 \cf28 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
No add-on support.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa80\partightenfactor0
\ls6\ilvl0\cf28 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Slows down with newer versions, such as IE7.\cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
May be less secure than other browsers.\cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Becomes buggy easily.\cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Targeted by hackers.\cb1 \
\pard\pardeftab720\sl340\partightenfactor0

\f1\fs28 \cf0 \cb3 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b \cf2 //Interview Tips\
\pard\pardeftab720\sl480\partightenfactor0

\f11\b0 \cf14 \expnd0\expndtw0\kerning0
1.  Speak out loud\
2.  Ask clarification questions\
3.  Call out assumptions\
4.  Explain thoughts clearly before jumping into coding\
5.  What are your edge cases?  Will anything be null?  \
6.  Find a solution as opposed to no solution\
7.  Google tech dev guide\
8.  Get used to coding on white board\
9.  Know the basic data structures and algorithms really well\
\
//Use STAR method for behavioral questions\
\pard\pardeftab720\sl744\partightenfactor0
\cf29 The STAR format stands for\'a0
\f14\i Situation
\f11\i0 ,\'a0
\f14\i Task
\f11\i0 ,\'a0
\f14\i Action
\f11\i0 ,\'a0
\f14\i Result
\f11\i0 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl768\partightenfactor0
\ls7\ilvl0
\f13\b \cf29 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
S
\f11\b0 ituation: An event, project, or challenge faced\
\ls7\ilvl0
\f13\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
T
\f11\b0 ask: Your responsibilities and assignments for the situation\
\ls7\ilvl0
\f13\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
A
\f11\b0 ction: Steps or procedure taken to relieve or rectify situation\
\ls7\ilvl0
\f13\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
R
\f11\b0 esult: Results of actions taken.
\f1 \
\pard\pardeftab720\sl480\partightenfactor0

\f7 \cf14 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf2 \kerning1\expnd0\expndtw0 //What you should fully comprehend\
\pard\pardeftab720\sl480\partightenfactor0

\f11\b0 \cf14 \expnd0\expndtw0\kerning0
Data Structures (a way of organizing data so that it can be used effectively) to know:\
Arrays\
Linked Lists\
Stacks\
Queues\
Sets\
Maps\
Binary Heaps\
Trie (Prefix Tree)\
Graphs
\f13\b \cf2 \kerning1\expnd0\expndtw0 \
\

\f11\b0 \cf14 \expnd0\expndtw0\kerning0
Algorithms to know how to code:\
Sorting, searching, binary search\
Divide-and-conquer\
Dynamic programming and memoization\
Greedy algorithms\
Recursion\
Graph traversal BFS DFS\
Pattern matching\
\
Algorithms to conceptually understand:\
Dijkstra\'92s (Shortest path using priority queue and graph)\
Floyd-Warshall\
Traveling Salesman\
A* (Improvement on Dijkstra\'92s Algorithm)\
bloom filter\
breadth-first iterative search\
binary search\
k-way merge\
bubble/selection/insertion sort\
in-place quick sort\
bucket/radix sort\
closest pair
\f0\b \cf2 \kerning1\expnd0\expndtw0 \
}