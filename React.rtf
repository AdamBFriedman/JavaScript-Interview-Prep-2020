{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red154\green154\blue154;\red255\green255\blue254;\red0\green0\blue0;
\red19\green120\blue72;\red0\green0\blue255;\red14\green110\blue109;\red255\green255\blue254;\red191\green28\blue37;
\red127\green127\blue127;\red14\green110\blue109;\red191\green28\blue37;\red19\green120\blue72;\red127\green127\blue127;
}
{\*\expandedcolortbl;;\cssrgb\c66667\c66667\c66667;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c3529\c53333\c35294;\cssrgb\c0\c0\c100000;\cssrgb\c0\c50196\c50196;\cssrgb\c100000\c100000\c99608;\cssrgb\c80392\c19216\c19216;
\cssrgb\c57046\c57047\c57046;\cssrgb\c0\c50196\c50196;\cssrgb\c80392\c19216\c19216;\cssrgb\c3529\c53333\c35294;\cssrgb\c57046\c57047\c57046;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl420\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // React Cheat Sheet\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // Install React\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 1\cf4 \strokec4 .  Open terminal and type \cf6 \strokec6 in\cf4 \strokec4 : npm i -g create-react-app\cb1 \
\cf5 \cb3 \strokec5 2\cf4 \strokec4 .  \cf7 \strokec7 OPTIONAL\cf4 \strokec4  - \cf6 \strokec6 in\cf4 \strokec4  \cf7 \strokec7 VSCode\cf4 \strokec4  install \cf7 \strokec7 Simple\cf4 \strokec4  \cf7 \strokec7 React\cf4 \strokec4  \cf7 \strokec7 Snippets\cf4 \strokec4  and \cf7 \strokec7 Prettier\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 3\cf4 \strokec4 .  In terminal type \cf6 \strokec6 in\cf4 \strokec4 : create-react-app nameOfProject\cb1 \
\cf5 \cb3 \strokec5 4\cf4 \strokec4 .  You will be prompted to change directories and open your app \cf6 \strokec6 with\cf4 \strokec4  npm start\cb1 \
\
\
\cf2 \cb3 \strokec2 // Modern JS features you use in React\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 1\cf4 \strokec4 . \cb8 \outl0\strokewidth0 Classes\cb1 \outl0\strokewidth0 \
\cf5 \cb3 \strokec5 2\cf4 \strokec4 . \cb8 \outl0\strokewidth0 JSX\cb3 \outl0\strokewidth0  (\cf7 \strokec7 JavaScript\cf4 \strokec4  \cf7 \strokec7 XML\cf4 \strokec4 )\cb1 \
\cf5 \cb3 \strokec5 3\cf4 \strokec4 .  Babel takes our \cf7 \strokec7 JSX\cf4 \strokec4  and converts it to \cf7 \strokec7 JavaScript\cf4 \strokec4  code that our browsers will understand\cb1 \
\
\cf2 \cb3 \strokec2 // Basic React index.js\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 import\cf4 \strokec4  \cf7 \strokec7 React\cf4 \strokec4  \cf6 \strokec6 from\cf4 \strokec4  \cf9 \strokec9 \'91\cf4 \strokec4 react\cf9 \strokec9 \'92\cf4 \strokec4 ;\cb1 \
\cf6 \cb3 \strokec6 import\cf4 \strokec4  \cf7 \strokec7 ReactDOM\cf4 \strokec4  \cf6 \strokec6 from\cf4 \strokec4  \cf9 \strokec9 \'91\cf4 \strokec4 react-dom\cf9 \strokec9 \'92\cf4 \strokec4 ;\cb1 \
\
\cf6 \cb3 \strokec6 const\cf4 \strokec4  element = <h1>\cf7 \strokec7 Hello\cf4 \strokec4  \cf7 \strokec7 World\cf4 \strokec4 </h1>;\cb1 \
\cf7 \cb3 \strokec7 ReactDOM\cf4 \strokec4 .render(element, document.getElementById(\cf9 \strokec9 \'91\cf4 \strokec4 root\cf9 \strokec9 \'92\cf4 \strokec4 ));\cb1 \
\
\cf2 \cb3 \strokec2 // Importing Bootstrap CSS\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 1\cf4 \strokec4 . npm install bootstrap\cb1 \
\cf5 \cb3 \strokec5 2\cf4 \strokec4 . In index.js, add the following: \cb1 \
\cb3 \'a0\'a0\cf6 \strokec6 import\cf4 \strokec4  \cf9 \strokec9 \'91\cf4 \strokec4 bootstrap/dist/css/bootstrap.css\cf9 \strokec9 \'92\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 // Create a component\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 1\cf4 \strokec4 . Create \cf9 \strokec9 \'93\cf4 \strokec4 components\cf9 \strokec9 \'94\cf4 \strokec4  folder \cf6 \strokec6 in\cf4 \strokec4  src root folder\cb1 \
\cf5 \cb3 \strokec5 2\cf4 \strokec4 . Create file \cf6 \strokec6 in\cf4 \strokec4  components called \cf9 \strokec9 \'93\cf4 \strokec4 componentName.jsx\cf9 \strokec9 \'94\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 3\cf4 \strokec4 . \cf7 \strokec7 React\cf4 \strokec4  \cf7 \strokec7 Snippet\cf4 \strokec4  shortcut: \cf9 \strokec9 \'93\cf4 \strokec4 imrc\cf9 \strokec9 \'94\cf4 \strokec4  will produce the following:\cb1 \
\cb3 \'a0\'a0\cf6 \strokec6 import\cf4 \strokec4  \cf7 \strokec7 React\cf4 \strokec4 , \{ \cf7 \strokec7 Component\cf4 \strokec4  \} \cf6 \strokec6 from\cf4 \strokec4  \cf9 \strokec9 \'91\cf4 \strokec4 react\cf9 \strokec9 \'92\cf4 \strokec4 ;\cb1 \
\cf5 \cb3 \strokec5 4\cf4 \strokec4 . \cf7 \strokec7 React\cf4 \strokec4  \cf7 \strokec7 Snippet\cf4 \strokec4  shortcut: \cf9 \strokec9 \'93\cf4 \strokec4 cc\cf9 \strokec9 \'94\cf4 \strokec4  will produce the following:\cb1 \
\cb3 \'a0\'a0\cf6 \strokec6 class\cf4 \strokec4  \cf6 \strokec6 extends\cf4 \strokec4  \cf7 \strokec7 Component\cf4 \strokec4  \{\cb1 \
\cb3 \'a0\'a0  state = \{\}\cb1 \
\cb3 \'a0\'a0  render() \{\cb1 \
\cb3 \'a0\'a0    \cf6 \strokec6 return\cf4 \strokec4  ()\cb1 \
\cb3 \'a0\'a0  \}\cb1 \
\cb3 \'a0\'a0\}\cb1 \
\cb3 \'a0\'a0\cb1 \
\cb3 \'a0\'a0\cf6 \strokec6 export\cf4 \strokec4  \cf6 \strokec6 default\cf4 \strokec4  ;\cb1 \
\cf5 \cb3 \strokec5 5\cf4 \strokec4 .  The above snippet will not give the name \cf6 \strokec6 of\cf4 \strokec4  the component so add it where the multi-cursor tells you to.  \cf7 \strokec7 Always\cf4 \strokec4  capitalize the name ie \cf6 \strokec6 class\cf4 \strokec4  \cf7 \strokec7 Counter\cf9 \strokec9 \'85\cf4 \strokec4  \cf6 \strokec6 export\cf4 \strokec4  \cf6 \strokec6 default\cf4 \strokec4  \cf7 \strokec7 Counter\cf4 \strokec4 ;\cb1 \
\cf5 \cb3 \strokec5 6\cf4 \strokec4 .  Go to index.js and add the following:\cb1 \
\cb3 \'a0\'a0\cf6 \strokec6 import\cf4 \strokec4  \cf7 \strokec7 Counter\cf4 \strokec4  \cf6 \strokec6 from\cf4 \strokec4  \cf9 \strokec9 \'91\cf4 \strokec4 ./components/counter\cf9 \strokec9 \'92\cf4 \strokec4 ;\cb1 \
\cb3 \'a0\'a0\cf7 \strokec7 ReactDOM\cf4 \strokec4 .render(<\cf7 \strokec7 Counter\cf4 \strokec4  />, document.getElementById(\cf9 \strokec9 \'91\cf4 \strokec4 root\cf9 \strokec9 \'92\cf4 \strokec4 ));\cb1 \
\
\cf2 \cb3 \strokec2 // Embedding Expressions\cf4 \cb1 \strokec4 \
\cb3 Babel cannot read a \cf6 \strokec6 return\cf4 \strokec4  statement \cf6 \strokec6 with\cf4 \strokec4  two elements ie \cf6 \strokec6 return\cf4 \strokec4  <h1></h1><h2></h2>\cb1 \
\cb3 You need to wrap it \cf6 \strokec6 in\cf4 \strokec4  one element (\cf7 \strokec7 React\cf4 \strokec4 .\cf7 \strokec7 Fragment\cf4 \strokec4 )\cb1 \
\cb3 \'a0\'a0\cf6 \strokec6 class\cf4 \strokec4  \cf7 \strokec7 Counter\cf4 \strokec4  \cf6 \strokec6 extends\cf4 \strokec4  \cf7 \strokec7 Component\cf4 \strokec4  \{\cb1 \
\cb3 \'a0\'a0  state = \{\}\cb1 \
\cb3 \'a0\'a0  render() \{\cb1 \
\cb3 \'a0\'a0    \cf6 \strokec6 return\cf4 \strokec4  (\cb1 \
\cb3 \'a0\'a0      <\cf7 \strokec7 React\cf4 \strokec4 .\cf7 \strokec7 Fragment\cf4 \strokec4 >\cb1 \
\cb3 \'a0\'a0\'a0\'a0<h1>\cf7 \strokec7 Hello\cf4 \strokec4  \cf7 \strokec7 World\cf4 \strokec4 </h1>\cb1 \
\cb3 \'a0\'a0\'a0\'a0<h2>\cf7 \strokec7 Goodbye\cf4 \strokec4  \cf7 \strokec7 World\cf4 \strokec4 </h2>\cb1 \
\cb3 \'a0\'a0      </\cf7 \strokec7 React\cf4 \strokec4 .\cf7 \strokec7 Fragment\cf4 \strokec4 >\cb1 \
\cb3 \'a0\'a0    );\cb1 \
\cb3 \'a0\'a0  \}\cb1 \
\cb3 \'a0\'a0\}\
\
\cf2 \strokec2 // Using variables from state property\cf4 \cb1 \strokec4 \
\cb3 You use curly braces \{\} to write any javascript code\cb1 \
\cf6 \cb3 \strokec6 class\cf4 \strokec4  \cf7 \strokec7 Counter\cf4 \strokec4  \cf6 \strokec6 extends\cf4 \strokec4  \cf7 \strokec7 Component\cf4 \strokec4  \{\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4   state = \{\cb1 \
\cb3 \'a0\'a0  count: \cf5 \strokec5 0\cf4 \strokec4 ;\cb1 \
\cb3     \};\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4   render() \{\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4     \cf6 \strokec6 return\cf4 \strokec4  (\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4       <\cf7 \strokec7 React\cf4 \strokec4 .\cf7 \strokec7 Fragment\cf4 \strokec4 >\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\'a0\'a0\cf4 \strokec4 <span>\{\cf6 \strokec6 this\cf4 \strokec4 .state.count\}</span>\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\'a0\'a0\cf4 \strokec4 <button>\cf7 \strokec7 Increment\cf4 \strokec4 </button>\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4       </\cf7 \strokec7 React\cf4 \strokec4 .\cf7 \strokec7 Fragment\cf4 \strokec4 >\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4     );\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4   \}\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4 \}\cb1 \
\
\cf2 \cb3 \strokec2 // Object destructuring\cf4 \cb1 \strokec4 \
\cb3 formatCount() \{\cb1 \
\cb3   \cf6 \strokec6 return\cf4 \strokec4  \cf6 \strokec6 this\cf4 \strokec4 .state.count === \cf5 \strokec5 0\cf4 \strokec4  ? \cf9 \strokec9 \'91\cf7 \strokec7 Zero\cf9 \strokec9 \'92\cf4 \strokec4  : \cf6 \strokec6 this\cf4 \strokec4 .state.count;\cb1 \
\cb3 \}\cb1 \
\cb3 The above code can be changed to the following:\cb1 \
\cb3 formatCount() \{\cb1 \
\cb3   \cf6 \strokec6 const\cf4 \strokec4  \{ count \} = \cf6 \strokec6 this\cf4 \strokec4 .state;\cb1 \
\cb3   \cf6 \strokec6 return\cf4 \strokec4  count === \cf5 \strokec5 0\cf4 \strokec4  ? \cf9 \strokec9 \'91\cf7 \strokec7 Zero\cf9 \strokec9 \'92\cf4 \strokec4  : count;\cb1 \
\cb3 \}\cb1 \
\cb3 We would use the formatCount() like \cf6 \strokec6 this\cf4 \strokec4 :\cb1 \
\cb3   render() \{\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4     \cf6 \strokec6 return\cf4 \strokec4  (\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4       <\cf7 \strokec7 React\cf4 \strokec4 .\cf7 \strokec7 Fragment\cf4 \strokec4 >\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\'a0\'a0		\cf4 \strokec4 <span>\{\cf6 \strokec6 this\cf4 \strokec4 .formatCount()\}</span>\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\'a0\'a0		\cf4 \strokec4 <button>\cf7 \strokec7 Increment\cf4 \strokec4 </button>\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4       </\cf7 \strokec7 React\cf4 \strokec4 .\cf7 \strokec7 Fragment\cf4 \strokec4 >\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4     );\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4   \}\cb1 \
\cb3 To take the formatCount() even further, we can use \cf7 \strokec7 JSX\cf4 \strokec4 :\cb1 \
\cb3   formatCount() \{\cb1 \
\cb3    \cf6 \strokec6 const\cf4 \strokec4  \{ count \} = \cf6 \strokec6 this\cf4 \strokec4 .state;\cb1 \
\cb3    \cf6 \strokec6 return\cf4 \strokec4  count === \cf5 \strokec5 0\cf4 \strokec4  ? <h1>\cf7 \strokec7 Zero\cf4 \strokec4 </h1> : count;\cb1 \
\cb3 \}\cb1 \
\
\cf10 // Setting attributes\cf4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf6 \cb8 \outl0\strokewidth0   class\cf4  \cf11 Counter\cf4  \cf6 extends\cf4  \cf11 Component\cf4  \{\cb1 \
\cf12 \cb8 \'a0\'a0\cf4   state = \{\cb1 \
\cb8 \'a0\'a0  count: \cf13 \cb8 0\cf4 \cb8 ,\
    imageUrl: \'91https://picsum.photos/200\'92\cb1 \
\cb8     \};\cb1 \
\cf12 \cb8 \'a0\'a0\cf4   render() \{\cb1 \
\cf12 \cb8 \'a0\'a0\cf4     \cf6 return\cf4  (\cb1 \
\cf12 \cb8 \'a0\'a0\cf4       <\cf11 React\cf4 .\cf11 Fragment\cf4 >\
		<img src=\{this.state.imageUrl\} alt=\'93\'94 />\cb1 \
\cf12 \cb8 \'a0\'a0\'a0\'a0		\cf4 <span>\{\cf6 this\cf4 .state.count\}</span>\cb1 \
\cf12 \cb8 \'a0\'a0\'a0\'a0		\cf4 <button>\cf11 Increment\cf4 </button>\cb1 \
\cf12 \cb8 \'a0\'a0\cf4       </\cf11 React\cf4 .\cf11 Fragment\cf4 >\cb1 \
\cf12 \cb8 \'a0\'a0\cf4     );\cb1 \
\cf12 \cb8 \'a0\'a0\cf4   \}\cb1 \
\cf12 \cb8 \'a0\'a0\cf4 \}\
\
\pard\pardeftab720\sl420\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 // CSS class in React\cf4 \cb1 \strokec4 \
\cb3 <button className=\cf9 \strokec9 \'93\cf4 \strokec4 btn btn-secondary>\cf7 \strokec7 Increment\cf4 \strokec4 </button>\cb1 \
\
\cf2 \cb3 \strokec2 // Adding styles\cf4 \cb1 \strokec4 \
\cb3 styles = \{\cb1 \
\cb3   fontSize: \cf5 \strokec5 30\cf4 \strokec4 ,\cb1 \
\cb3   fontWeight: \cf9 \strokec9 \'91\cf4 \strokec4 bold\cf9 \strokec9 \'92\cf4 \cb1 \strokec4 \
\cb3 \}\cb1 \
\cb3 <span style = \{\cf6 \strokec6 this\cf4 \strokec4 .styles\}>\cf7 \strokec7 Hello\cf4 \strokec4 </span>\cb1 \
\
\cf2 \cb3 \strokec2 // Inline styling (we use double curly brackets \{\{\}\} )\cf4 \cb1 \strokec4 \
\cb3 <h1 style = \{\{ fontSize: \cf5 \strokec5 30\cf4 \strokec4 , fontWeight: \cf9 \strokec9 \'91\cf4 \strokec4 bold\cf9 \strokec9 \'92\cf4 \strokec4  \}\}>\cf7 \strokec7 Hello\cf4 \strokec4 </h1>\
\
\cf10 // Rendering classes dynamically\cf4 \
\cb1 let classes = \'93badge m-2 badge-\'93\
classes += this.state.count === 0 ? \'93warning\'94 : \'93primary\'94;\
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb8 \outl0\strokewidth0 <span style = \{\cf6 classes\cf4 \}>\cf11 Hello\cf4 </span>\
\
\cf10 // Refactor in React\cf4 \
If you highlight the first two lines in the above code and then right click, you will see an option called \'93refactor\'94.  This will turn the above into the following method:\
	\cf6 \cb3 \outl0\strokewidth0 \strokec6 let\cf4 \strokec4  classes = \cf6 \strokec6 this\cf4 \strokec4 .newMethod();\
	\cb8 \outl0\strokewidth0 <span style = \{\cf6 classes\cf4 \}>\cf11 Hello\cf4 </span>\cb1 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 \'a0\'a0newMethod() \{\cb1 \
\cb3 \'a0\'a0  \cf6 \strokec6 let\cf4 \strokec4  classes = \cf9 \strokec9 \'93\cf4 \strokec4 badge m-\cf5 \strokec5 2\cf4 \strokec4  badge-\cf9 \strokec9 \'93\cf4 \cb1 \strokec4 \
\cb3 \'a0\'a0  classes += \cf6 \strokec6 this\cf4 \strokec4 .state.count === \cf5 \strokec5 0\cf4 \strokec4  ? \cf9 \strokec9 \'93\cf4 \strokec4 warning\cf9 \strokec9 \'94\cf4 \strokec4  : \cf9 \strokec9 \'93\cf4 \strokec4 primary\cf9 \strokec9 \'94\cf4 \strokec4 ;\cb1 \
\cb3 \'a0\'a0\}\
	\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \
\cf10 // You can simplify the above code by the following:\cf4 \
	\cb8 \outl0\strokewidth0 getBadgeClasses() \{\cb1 \
\cb8 \'a0\'a0  \cf6 let\cf4  classes = \cf12 \'93\cf4 badge m-\cf13 \cb8 2\cf4 \cb8  badge-\cf12 \'93\cf4 \cb1 \
\cb8 \'a0\'a0  classes += \cf6 this\cf4 .state.count === \cf13 \cb8 0\cf4 \cb8  ? \cf12 \'93\cf4 warning\cf12 \'94\cf4  : \cf12 \'93\cf4 primary\cf12 \'94\cf4 ;\cb1 \
\cb8 \'a0\'a0  \}\
	\'85 \cb8 <span style = \{\cf6 this.getBadgeClasses()\cf4 \}>\cf11 Hello\cf4 </span>\cb1 \outl0\strokewidth0 \strokec4 \
\
\cf10 // Render lists\cf4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 state = \{\cb1 \
\cf9 \cb3 \strokec9 \'a0\'a0\cf4 \strokec4   count: \cf5 \strokec5 0\cf4 \strokec4 ,\cb1 \
\cb3     \cf7 \strokec7 Tags\cf4 \strokec4 : [\cf9 \strokec9 \'93\cf7 \strokec7 Tag1\cf9 \strokec9 \'94\cf4 \strokec4 , \cf9 \strokec9 \'93\cf7 \strokec7 Tag2\cf9 \strokec9 \'94\cf4 \strokec4 , \cf9 \strokec9 \'93\cf7 \strokec7 Tag3\cf9 \strokec9 \'94\cf4 \strokec4 ]\cb1 \
\cb3     \};\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb8 \outl0\strokewidth0 	render() \{\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf12 \cb8 \'a0\'a0\cf4 \cb8     \cf6 return\cf4  (\cb1 \
\cf12 \cb8 		\cf4 \cb8 <ul>\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb8 \'a0\'a0  \{ \cf6 this\cf4 .state.tags.map(tag => <li key=\{tag\}>\{tag\}</li>) \}\cb1 \
\cb8 \'a0\'a0		</ul>\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf12 \cb8 \'a0\'a0\cf4 \cb8     );\cb1 \
\cf12 \cb8 \'a0\'a0\cf4 \cb8   \}\cb1 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \}\
\
\pard\pardeftab720\sl420\partightenfactor0
\cf14 \outl0\strokewidth0 // Conditional rendering\cf4 \outl0\strokewidth0 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 renderTags() \{\cb1 \
\cb3  \cf6 \strokec6 if\cf4 \strokec4  (\cf6 \strokec6 this\cf4 \strokec4 .state.tags.length === \cf5 \strokec5 0\cf4 \strokec4 ) \cf6 \strokec6 return\cf4 \strokec4  \cf6 \strokec6 null\cf4 \strokec4 ;\cb1 \
\cb3  \cf6 \strokec6 return\cf4 \strokec4  <ul> \{ \cf6 \strokec6 this\cf4 \strokec4 .state.tags.map(tag => <li key=\{tag\}>\{tag\}</li>) \} </ul>\cb1 \
\cb3 \}\cb8 \outl0\strokewidth0 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \
render() \{\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf12 \cb8 \'a0\'a0\cf4 \cb8     \cf6 return\cf4  (\cb1 \
\cf12 \cb8 		\cf4 \cb3 \outl0\strokewidth0 \strokec4 <div>\{\cf6 \strokec6 this\cf4 \strokec4 .renderTags()\}</div>\cb1 \outl0\strokewidth0 \
\cf12 \cb8 \'a0\'a0\cf4 \cb8     );\cb1 \
\cf12 \cb8 \'a0\'a0\cf4 \cb8   \}\
\
**You can also do the following without a helper function:\
	render() \{\cb1 \
\cf12 \cb8 \'a0\'a0\cf4 \cb8     \cf6 return\cf4  (\
		\cb3 \outl0\strokewidth0 \strokec4 \{\cf6 \strokec6 this\cf4 \strokec4 .state.tags.length === \cf5 \strokec5 0\cf4 \strokec4  && \cf9 \strokec9 \'93\cf4 \strokec4 Create tag!\cf9 \strokec9 \'94\cf4 \strokec4 \}\cb1 \outl0\strokewidth0 \
\cf12 \cb8 		\cf4 \cb8 <div>\{\cf6 this\cf4 .renderTags()\}</div>\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf12 \cb8 \'a0\'a0\cf4 \cb8     );\cb1 \
\cf12 \cb8 \'a0\'a0\cf4 \cb8   \}\
\
\pard\pardeftab720\sl420\partightenfactor0
\cf10 // Handle Events\cf4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 \outl0\strokewidth0 handleIncrement() \{\cb1 \
\cb3   console.log(\cf9 \strokec9 \'93\cf7 \strokec7 Clicked\cf4 \strokec4 !\cf9 \strokec9 \'94\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\cb3 <button\cb1 \
\cb3   onClick=\{\cf6 \strokec6 this\cf4 \strokec4 .handleIncrement\}\cb1 \
\cb3   className=\cf9 \strokec9 \'93\cf4 \strokec4 btn btn-secondary\cf9 \strokec9 \'94\cf4 \cb1 \strokec4 \
\cb3 >\cb1 \
\cb3   \cf7 \strokec7 Increment\cf4 \cb1 \strokec4 \
\cb3 </button>\
\
\cf10 // Binding Event Handlers\cf4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb8 \outl0\strokewidth0 state = \{\cb1 \
\cf12 \cb8   \cf4 count: \cf13 \cb8 0\cf4 \cb1 \
\cb8 \};\
\
\pard\pardeftab720\sl420\partightenfactor0
\cf6 \cb3 \outl0\strokewidth0 \strokec6 constructor\cf4 \strokec4 () \{\cb1 \
\cb3   \cf6 \strokec6 super\cf4 \strokec4 ();\cb1 \
\cb3   \cf6 \strokec6 this\cf4 \strokec4 .handleIncrement = \cf6 \strokec6 this\cf4 \strokec4 .handleIncrement.bind(\cf6 \strokec6 this\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 handleIncrement() \{\cb1 \
\cb3   console.log(\cf6 \strokec6 this\cf4 \strokec4 .state);\cb1 \
\cb3 \}\cb8 \outl0\strokewidth0 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf14 \cb8 // Binding Event Handlers with Arrow function because arrow functions don\'92t bind the this keyword, they inherit it\cf4 \cb8 \
state = \{\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf12 \cb8   \cf4 \cb8 count: \cf13 \cb8 0\cf4 \cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb8 \};\cb1 \
\
\cb8 handleIncrement = () => \{\cb1 \
\cb8   console.log(\cf6 this\cf4 .state);\cb1 \
\cb8 \}\
\
\cb1 \outl0\strokewidth0 \
}