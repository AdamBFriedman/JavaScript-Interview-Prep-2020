{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red251\green2\blue7;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue255;\red255\green255\blue254;\red154\green154\blue154;\red19\green120\blue72;\red14\green110\blue109;
\red255\green255\blue255;\red185\green122\blue229;\red149\green155\blue194;\red112\green150\blue255;\red121\green213\blue255;
\red234\green89\blue101;\red254\green193\blue89;\red243\green119\blue89;\red184\green230\blue123;}
{\*\expandedcolortbl;;\cssrgb\c100000\c14913\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c99608;\cssrgb\c66667\c66667\c66667;\cssrgb\c3529\c53333\c35294;\cssrgb\c0\c50196\c50196;
\cssrgb\c100000\c100000\c100000;\cssrgb\c78039\c57255\c91765;\cssrgb\c65098\c67451\c80392;\cssrgb\c50980\c66667\c100000;\cssrgb\c53725\c86667\c100000;
\cssrgb\c94118\c44314\c47059;\cssrgb\c100000\c79608\c41961;\cssrgb\c96863\c54902\c42353;\cssrgb\c76471\c90980\c55294;}
\margl1440\margr1440\vieww10800\viewh17420\viewkind0
\deftab720
\pard\pardeftab720\sl420\partightenfactor0

\f0\b\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
// MERGE SORT\

\f1\b0\fs28 \cf4 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb6 \outl0\strokewidth0 \strokec5 const\cf4 \strokec4  mergeSort = array => \{\cb1 \
\cb6   \cf7 \strokec7 //Check if array can be split\cf4 \cb1 \strokec4 \
\cb6   \cf5 \strokec5 if\cf4 \strokec4 (array.length < \cf8 \strokec8 2\cf4 \strokec4 ) \cf5 \strokec5 return\cf4 \strokec4  array;\cb1 \
\cb6   \cf7 \strokec7 //Get Middle index\cf4 \cb1 \strokec4 \
\cb6   \cf5 \strokec5 const\cf4 \strokec4  middle = \cf9 \strokec9 Math\cf4 \strokec4 .floor(array.length / \cf8 \strokec8 2\cf4 \strokec4 );\cb1 \
\cb6   \cf7 \strokec7 //Split Array In Two Sides\cf4 \cb1 \strokec4 \
\cb6   \cf5 \strokec5 const\cf4 \strokec4  leftSide = array.slice(\cf8 \strokec8 0\cf4 \strokec4 , middle);\cb1 \
\cb6   \cf5 \strokec5 const\cf4 \strokec4  rightSide = array.slice(middle, array.length);\cb1 \
\cb6   \cf7 \strokec7 //Use recusion to continue splitting\cf4 \cb1 \strokec4 \
\cb6   \cf5 \strokec5 return\cf4 \strokec4  merge(mergeSort(leftSide), mergeSort(rightSide));\cb1 \
\cb6 \}\cb1 \
\
\cf5 \cb6 \strokec5 const\cf4 \strokec4  merge = (left, right) => \{\cb1 \
\cb6   \cf7 \strokec7 //Create New Array\cf4 \cb1 \strokec4 \
\cb6   \cf5 \strokec5 const\cf4 \strokec4  result = [];\cb1 \
\cb6   \cf7 \strokec7 //Check if left array and right array is empty\cf4 \cb1 \strokec4 \
\cb6   \cf5 \strokec5 while\cf4 \strokec4 (left.length && right.length) \{\cb1 \
\cb6     \cf7 \strokec7 //Find lower value\cf4 \cb1 \strokec4 \
\cb6     \cf5 \strokec5 if\cf4 \strokec4 (left[\cf8 \strokec8 0\cf4 \strokec4 ] <= right[\cf8 \strokec8 0\cf4 \strokec4 ]) \{\cb1 \
\cb6       \cf7 \strokec7 //Add left value\cf4 \cb1 \strokec4 \
\cb6       result.push(left.shift());\cb1 \
\cb6     \} \cf5 \strokec5 else\cf4 \strokec4  \{\cb1 \
\cb6       \cf7 \strokec7 //Add right value\cf4 \cb1 \strokec4 \
\cb6       result.push(right.shift());\cb1 \
\cb6     \}\cb1 \
\cb6   \}\cb1 \
\cb6   \cf7 \strokec7 //Merge left array\cf4 \cb1 \strokec4 \
\cb6   \cf5 \strokec5 while\cf4 \strokec4 (left.length) result.push(left.shift());\cb1 \
\cb6   \cf7 \strokec7 //Merge right array\cf4 \cb1 \strokec4 \
\cb6   \cf5 \strokec5 while\cf4 \strokec4 (right.length) result.push(right.shift());\cb1 \
\cb6   \cf7 \strokec7 //return result array\cf4 \cb1 \strokec4 \
\cb6   \cf5 \strokec5 return\cf4 \strokec4  result;\cb1 \
\cb6 \}\cb1 \
\pard\pardeftab720\sl420\partightenfactor0
\cf4 \cb3 \outl0\strokewidth0 \
\

\f0\b\fs36 \cf2 // QUICK SORT
\f1\b0\fs28 \cf4 \
\
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb6 \outl0\strokewidth0 \strokec5 function\cf4 \strokec4  quickSort(arr, start, end) \{\cb1 \
\cb6     \cf5 \strokec5 if\cf4 \strokec4  (start >= end) \{\cb1 \
\cb6       \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb6     \}\cb1 \
\cb6     \cf5 \strokec5 let\cf4 \strokec4  index = partition(arr, start, end);\cb1 \
\cb6     states[index] = -\cf8 \strokec8 1\cf4 \strokec4 ;\cb1 \
\cb6   \cb1 \
\
\cb6       quickSort(arr, start, index - \cf8 \strokec8 1\cf4 \strokec4 ),\cb1 \
\cb6       quickSort(arr, index + \cf8 \strokec8 1\cf4 \strokec4 , end)\cb1 \
\
\cb6   \}\cb1 \
\cb6   \cb1 \
\cb6   \cf5 \strokec5 function\cf4 \strokec4  partition(arr, start, end) \{\cb1 \
\cb6     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  i = start; i < end; i++) \{\cb1 \
\cb6       states[i] = \cf8 \strokec8 1\cf4 \strokec4 ;\cb1 \
\cb6     \}\cb1 \
\cb6   \cb1 \
\cb6     \cf5 \strokec5 let\cf4 \strokec4  pivotValue = arr[end];\cb1 \
\cb6     \cf5 \strokec5 let\cf4 \strokec4  pivotIndex = start;\cb1 \
\cb6     states[pivotIndex] = \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb6     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  i = start; i < end; i++) \{\cb1 \
\cb6       \cf5 \strokec5 if\cf4 \strokec4  (arr[i] < pivotValue) \{\cb1 \
\cb6         swap(arr, i, pivotIndex);\cb1 \
\cb6         states[pivotIndex] = -\cf8 \strokec8 1\cf4 \strokec4 ;\cb1 \
\cb6         pivotIndex++;\cb1 \
\cb6         states[pivotIndex] = \cf8 \strokec8 0\cf4 \strokec4 ;\cb1 \
\cb6       \}\cb1 \
\cb6     \}\cb1 \
\cb6     swap(arr, pivotIndex, end);\cb1 \
\cb6   \cb1 \
\cb6     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  i = start; i < end; i++) \{\cb1 \
\cb6       \cf5 \strokec5 if\cf4 \strokec4  (i != pivotIndex) \{\cb1 \
\cb6         states[i] = -\cf8 \strokec8 1\cf4 \strokec4 ;\cb1 \
\cb6       \}\cb1 \
\cb6     \}\cb1 \
\cb6   \cb1 \
\cb6     \cf5 \strokec5 return\cf4 \strokec4  pivotIndex;\cb1 \
\cb6   \}\cb1 \
\
\cf5 \cb6 \strokec5 function\cf4 \strokec4  swap(arr, a, b) \{\cb1 \
\cb6     \cf5 \strokec5 let\cf4 \strokec4  temp = arr[a];\cb1 \
\cb6     arr[a] = arr[b];\cb1 \
\cb6     arr[b] = temp;\cb1 \
\cb6 \}\cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\fs24 \cf4 \cb3 \outl0\strokewidth0 \
\
\pard\pardeftab720\sl420\partightenfactor0

\f0\b\fs36 \cf2 // Factorial\

\f1\b0\fs24 \cf4 \
\pard\pardeftab720\sl420\partightenfactor0

\fs28 \cf5 \cb6 \outl0\strokewidth0 \strokec5 function\cf4 \strokec4  factorial(num) \{\cb1 \
\cb6   \cf5 \strokec5 if\cf4 \strokec4  (num < \cf8 \strokec8 2\cf4 \strokec4 ) \{\cb1 \
\cb6     \cf5 \strokec5 return\cf4 \strokec4  num\cb1 \
\cb6   \}\cb1 \
\cb6   \cf5 \strokec5 return\cf4 \strokec4  num * factorial(num - \cf8 \strokec8 1\cf4 \strokec4 )\cb1 \
\cb6 \}\cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\fs24 \cf4 \cb3 \outl0\strokewidth0 \
\
\pard\pardeftab720\sl420\partightenfactor0

\f0\b\fs36 \cf2 // Create Table from 2D Array
\f1\b0\fs24 \cf4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb10 \outl0\strokewidth0 \strokec11 function\strokec12  \strokec13 twoD\strokec14 (\strokec12 rows\strokec14 ,\strokec12  cols\strokec14 )\strokec12  \strokec14 \{\strokec12 \
\
\strokec11 let\strokec15  \strokec12 grid\strokec15  \strokec14 =\strokec15  \strokec14 new\strokec15  \strokec16 Array\strokec15 (\strokec12 rows\strokec15 )\strokec14 ;\strokec12 \
\strokec11 let\strokec15  \strokec12 num\strokec15  \strokec14 =\strokec15  \strokec17 0\strokec14 ;\strokec12 \
\
\pard\pardeftab720\sl360\partightenfactor0

\f2\i \cf4 \strokec14 for
\f1\i0 \strokec15  (\strokec11 let\strokec15  \strokec12 i\strokec14 =\strokec17 0\strokec14 ;\strokec15  \strokec12 i\strokec14 <\strokec12 rows\strokec14 ;\strokec15  \strokec12 i\strokec14 ++\strokec15 ) \strokec14 \{\strokec12 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \strokec15   \strokec12 grid\strokec15 [\strokec12 i\strokec15 ] \strokec14 =\strokec15  []\strokec12 \
\strokec15   
\f2\i \strokec14 for
\f1\i0 \strokec15  (\strokec11 let\strokec15  \strokec12 j\strokec14 =\strokec17 1\strokec14 ;\strokec15  \strokec12 j\strokec14 <=\strokec15  \strokec12 cols\strokec14 ;\strokec15  \strokec12 j\strokec14 ++\strokec15 ) \strokec14 \{\strokec12 \
\strokec15     \strokec12 grid\strokec15 [\strokec12 i\strokec15 ][\strokec12 j\strokec14 -\strokec17 1\strokec15 ] \strokec14 =\strokec15  \strokec12 j\strokec15  \strokec14 +\strokec15  \strokec12 num\
\strokec15   \strokec14 \}\strokec12 \
\strokec15   \strokec12 num\strokec15  \strokec14 +=\strokec15  \strokec12 cols\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \strokec14 \}\strokec12 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \strokec11 let\strokec15  \strokec12 table\strokec15  \strokec14 =\strokec15  \strokec12 document\strokec14 .\strokec13 createElement\strokec15 (\strokec14 '\strokec18 table\strokec14 '\strokec15 )\strokec14 ;\strokec12 \
\pard\pardeftab720\sl360\partightenfactor0

\f2\i \cf4 \strokec14 for
\f1\i0 \strokec15  (\strokec11 let\strokec15  \strokec12 row\strokec15  \strokec14 of\strokec15  \strokec12 grid\strokec15 ) \strokec14 \{\strokec12 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \strokec15   \strokec12 table\strokec14 .\strokec13 insertRow\strokec15 ()\strokec14 ;\strokec12 \
\strokec15   
\f2\i \strokec14 for
\f1\i0 \strokec15  (\strokec11 let\strokec15  \strokec12 cell\strokec15  \strokec14 of\strokec15  \strokec12 row\strokec15 ) \strokec14 \{\strokec12 \
\strokec15     \strokec11 let\strokec15  \strokec12 newCell\strokec15  \strokec14 =\strokec15  \strokec12 table\strokec14 .\strokec12 rows\strokec15 [\strokec12 table\strokec14 .\strokec12 rows\strokec14 .\strokec12 length\strokec15  \strokec14 -\strokec15  \strokec17 1\strokec15 ]\strokec14 .\strokec13 insertCell\strokec15 ()\strokec14 ;\strokec12 \
\strokec15     \strokec12 newCell\strokec14 .\strokec12 textContent\strokec15  \strokec14 =\strokec15  \strokec12 cell\strokec14 ;\strokec12 \
\strokec15   \strokec14 \}\strokec12 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \strokec14 \}\strokec12 \
document\strokec14 .\strokec12 body\strokec14 .\strokec13 appendChild\strokec15 (\strokec12 table\strokec15 )\strokec14 ;\strokec12 \
\strokec14 \}\cf12 \cb1 \strokec12 \
}